

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Sep 26 20:09:10 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og9 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	text28,local,class=CODE,merge=1,delta=2
    43                           	psect	text29,local,class=CODE,merge=1,delta=2
    44                           	psect	text30,local,class=CODE,merge=1,delta=2
    45                           	psect	text31,local,class=CODE,merge=1,delta=2
    46                           	psect	text32,local,class=CODE,merge=1,delta=2
    47                           	psect	text33,local,class=CODE,merge=1,delta=2
    48                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    49                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    50                           	dabs	1,0x7E,2
    51     0000                     
    52                           ; Version 2.40
    53                           ; Generated 17/11/2021 GMT
    54                           ; 
    55                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    56                           ; All rights reserved.
    57                           ; 
    58                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    59                           ; 
    60                           ; Redistribution and use in source and binary forms, with or without modification, are
    61                           ; permitted provided that the following conditions are met:
    62                           ; 
    63                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    64                           ;        conditions and the following disclaimer.
    65                           ; 
    66                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    67                           ;        of conditions and the following disclaimer in the documentation and/or other
    68                           ;        materials provided with the distribution. Publication is not required when
    69                           ;        this file is used in an embedded application.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC16F628A Definitions
    85                           ; 
    86                           ; SFR Addresses
    87     0000                     	;# 
    88     0001                     	;# 
    89     0002                     	;# 
    90     0003                     	;# 
    91     0004                     	;# 
    92     0005                     	;# 
    93     0006                     	;# 
    94     000A                     	;# 
    95     000B                     	;# 
    96     000C                     	;# 
    97     000E                     	;# 
    98     000E                     	;# 
    99     000F                     	;# 
   100     0010                     	;# 
   101     0011                     	;# 
   102     0012                     	;# 
   103     0015                     	;# 
   104     0015                     	;# 
   105     0016                     	;# 
   106     0017                     	;# 
   107     0018                     	;# 
   108     0019                     	;# 
   109     001A                     	;# 
   110     001F                     	;# 
   111     0081                     	;# 
   112     0085                     	;# 
   113     0086                     	;# 
   114     008C                     	;# 
   115     008E                     	;# 
   116     0092                     	;# 
   117     0098                     	;# 
   118     0099                     	;# 
   119     009A                     	;# 
   120     009B                     	;# 
   121     009C                     	;# 
   122     009D                     	;# 
   123     009F                     	;# 
   124     0000                     	;# 
   125     0001                     	;# 
   126     0002                     	;# 
   127     0003                     	;# 
   128     0004                     	;# 
   129     0005                     	;# 
   130     0006                     	;# 
   131     000A                     	;# 
   132     000B                     	;# 
   133     000C                     	;# 
   134     000E                     	;# 
   135     000E                     	;# 
   136     000F                     	;# 
   137     0010                     	;# 
   138     0011                     	;# 
   139     0012                     	;# 
   140     0015                     	;# 
   141     0015                     	;# 
   142     0016                     	;# 
   143     0017                     	;# 
   144     0018                     	;# 
   145     0019                     	;# 
   146     001A                     	;# 
   147     001F                     	;# 
   148     0081                     	;# 
   149     0085                     	;# 
   150     0086                     	;# 
   151     008C                     	;# 
   152     008E                     	;# 
   153     0092                     	;# 
   154     0098                     	;# 
   155     0099                     	;# 
   156     009A                     	;# 
   157     009B                     	;# 
   158     009C                     	;# 
   159     009D                     	;# 
   160     009F                     	;# 
   161     0000                     	;# 
   162     0001                     	;# 
   163     0002                     	;# 
   164     0003                     	;# 
   165     0004                     	;# 
   166     0005                     	;# 
   167     0006                     	;# 
   168     000A                     	;# 
   169     000B                     	;# 
   170     000C                     	;# 
   171     000E                     	;# 
   172     000E                     	;# 
   173     000F                     	;# 
   174     0010                     	;# 
   175     0011                     	;# 
   176     0012                     	;# 
   177     0015                     	;# 
   178     0015                     	;# 
   179     0016                     	;# 
   180     0017                     	;# 
   181     0018                     	;# 
   182     0019                     	;# 
   183     001A                     	;# 
   184     001F                     	;# 
   185     0081                     	;# 
   186     0085                     	;# 
   187     0086                     	;# 
   188     008C                     	;# 
   189     008E                     	;# 
   190     0092                     	;# 
   191     0098                     	;# 
   192     0099                     	;# 
   193     009A                     	;# 
   194     009B                     	;# 
   195     009C                     	;# 
   196     009D                     	;# 
   197     009F                     	;# 
   198     0000                     	;# 
   199     0001                     	;# 
   200     0002                     	;# 
   201     0003                     	;# 
   202     0004                     	;# 
   203     0005                     	;# 
   204     0006                     	;# 
   205     000A                     	;# 
   206     000B                     	;# 
   207     000C                     	;# 
   208     000E                     	;# 
   209     000E                     	;# 
   210     000F                     	;# 
   211     0010                     	;# 
   212     0011                     	;# 
   213     0012                     	;# 
   214     0015                     	;# 
   215     0015                     	;# 
   216     0016                     	;# 
   217     0017                     	;# 
   218     0018                     	;# 
   219     0019                     	;# 
   220     001A                     	;# 
   221     001F                     	;# 
   222     0081                     	;# 
   223     0085                     	;# 
   224     0086                     	;# 
   225     008C                     	;# 
   226     008E                     	;# 
   227     0092                     	;# 
   228     0098                     	;# 
   229     0099                     	;# 
   230     009A                     	;# 
   231     009B                     	;# 
   232     009C                     	;# 
   233     009D                     	;# 
   234     009F                     	;# 
   235     0000                     	;# 
   236     0001                     	;# 
   237     0002                     	;# 
   238     0003                     	;# 
   239     0004                     	;# 
   240     0005                     	;# 
   241     0006                     	;# 
   242     000A                     	;# 
   243     000B                     	;# 
   244     000C                     	;# 
   245     000E                     	;# 
   246     000E                     	;# 
   247     000F                     	;# 
   248     0010                     	;# 
   249     0011                     	;# 
   250     0012                     	;# 
   251     0015                     	;# 
   252     0015                     	;# 
   253     0016                     	;# 
   254     0017                     	;# 
   255     0018                     	;# 
   256     0019                     	;# 
   257     001A                     	;# 
   258     001F                     	;# 
   259     0081                     	;# 
   260     0085                     	;# 
   261     0086                     	;# 
   262     008C                     	;# 
   263     008E                     	;# 
   264     0092                     	;# 
   265     0098                     	;# 
   266     0099                     	;# 
   267     009A                     	;# 
   268     009B                     	;# 
   269     009C                     	;# 
   270     009D                     	;# 
   271     009F                     	;# 
   272     0000                     	;# 
   273     0001                     	;# 
   274     0002                     	;# 
   275     0003                     	;# 
   276     0004                     	;# 
   277     0005                     	;# 
   278     0006                     	;# 
   279     000A                     	;# 
   280     000B                     	;# 
   281     000C                     	;# 
   282     000E                     	;# 
   283     000E                     	;# 
   284     000F                     	;# 
   285     0010                     	;# 
   286     0011                     	;# 
   287     0012                     	;# 
   288     0015                     	;# 
   289     0015                     	;# 
   290     0016                     	;# 
   291     0017                     	;# 
   292     0018                     	;# 
   293     0019                     	;# 
   294     001A                     	;# 
   295     001F                     	;# 
   296     0081                     	;# 
   297     0085                     	;# 
   298     0086                     	;# 
   299     008C                     	;# 
   300     008E                     	;# 
   301     0092                     	;# 
   302     0098                     	;# 
   303     0099                     	;# 
   304     009A                     	;# 
   305     009B                     	;# 
   306     009C                     	;# 
   307     009D                     	;# 
   308     009F                     	;# 
   309                           
   310                           	psect	idataBANK0
   311     070E                     __pidataBANK0:
   312                           
   313                           ;initializer for _PWM_Limit
   314     070E  340A               	retlw	10
   315     070F  3400               	retlw	0
   316                           
   317                           ;initializer for _MotorPWM
   318     0710  340A               	retlw	10
   319     0711  3400               	retlw	0
   320     000E                     _TMR1	set	14
   321     001A                     _RCREG	set	26
   322     0018                     _RCSTAbits	set	24
   323     0019                     _TXREG	set	25
   324     0018                     _RCSTA	set	24
   325     000C                     _PIR1bits	set	12
   326     000B                     _INTCONbits	set	11
   327     0010                     _T1CON	set	16
   328     001F                     _CMCON	set	31
   329     0006                     _PORTBbits	set	6
   330     0005                     _PORTAbits	set	5
   331     0059                     _INTF	set	89
   332     0098                     _TXSTAbits	set	152
   333     0098                     _TXSTA	set	152
   334     0099                     _SPBRG	set	153
   335     0081                     _OPTION_REGbits	set	129
   336     008C                     _PIE1bits	set	140
   337     0086                     _TRISBbits	set	134
   338     0085                     _TRISAbits	set	133
   339     0473                     _OSCF	set	1139
   340                           
   341                           	psect	strings
   342     0411                     __pstrings:
   343     0411                     stringtab:
   344     0411                     __stringtab:
   345     0411                     stringcode:	
   346                           ;	String table - string pointers are 1 byte each
   347                           
   348     0411                     stringdir:
   349     0411  3004               	movlw	high stringdir
   350     0412  008A               	movwf	10
   351     0413  0804               	movf	4,w
   352     0414  0A84               	incf	4,f
   353     0415  0782               	addwf	2,f
   354     0416                     __stringbase:
   355     0416  3400               	retlw	0
   356     0417                     __end_of__stringtab:
   357     0417                     STR_3:
   358     0417  3441               	retlw	65	;'A'
   359     0418  3454               	retlw	84	;'T'
   360     0419  342B               	retlw	43	;'+'
   361     041A  344E               	retlw	78	;'N'
   362     041B  3441               	retlw	65	;'A'
   363     041C  344D               	retlw	77	;'M'
   364     041D  3445               	retlw	69	;'E'
   365     041E  3444               	retlw	68	;'D'
   366     041F  3465               	retlw	101	;'e'
   367     0420  3473               	retlw	115	;'s'
   368     0421  346B               	retlw	107	;'k'
   369     0422  3442               	retlw	66	;'B'
   370     0423  346F               	retlw	111	;'o'
   371     0424  3474               	retlw	116	;'t'
   372     0425  3400               	retlw	0
   373     0426                     STR_4:
   374     0426  3441               	retlw	65	;'A'
   375     0427  3454               	retlw	84	;'T'
   376     0428  342B               	retlw	43	;'+'
   377     0429  3450               	retlw	80	;'P'
   378     042A  3449               	retlw	73	;'I'
   379     042B  344E               	retlw	78	;'N'
   380     042C  3431               	retlw	49	;'1'
   381     042D  3432               	retlw	50	;'2'
   382     042E  3433               	retlw	51	;'3'
   383     042F  3434               	retlw	52	;'4'
   384     0430  3400               	retlw	0
   385     0431                     STR_2:
   386     0431  3441               	retlw	65	;'A'
   387     0432  3454               	retlw	84	;'T'
   388     0433  342B               	retlw	43	;'+'
   389     0434  344D               	retlw	77	;'M'
   390     0435  344F               	retlw	79	;'O'
   391     0436  3444               	retlw	68	;'D'
   392     0437  3445               	retlw	69	;'E'
   393     0438  343D               	retlw	61	;'='
   394     0439  3430               	retlw	48	;'0'
   395     043A  3400               	retlw	0
   396     043B                     STR_1:
   397     043B  3441               	retlw	65	;'A'
   398     043C  3454               	retlw	84	;'T'
   399     043D  342B               	retlw	43	;'+'
   400     043E  3452               	retlw	82	;'R'
   401     043F  344F               	retlw	79	;'O'
   402     0440  344C               	retlw	76	;'L'
   403     0441  3445               	retlw	69	;'E'
   404     0442  343D               	retlw	61	;'='
   405     0443  3453               	retlw	83	;'S'
   406     0444  3400               	retlw	0
   407     0445                     STR_7:
   408     0445  3441               	retlw	65	;'A'
   409     0446  3400               	retlw	0
   410     0447                     STR_11:
   411     0447  3444               	retlw	68	;'D'
   412     0448  3400               	retlw	0
   413     0449                     STR_13:
   414     0449  344C               	retlw	76	;'L'
   415     044A  3400               	retlw	0
   416     044B                     STR_5:
   417     044B  344D               	retlw	77	;'M'
   418     044C  3400               	retlw	0
   419     044D                     STR_15:
   420     044D  3452               	retlw	82	;'R'
   421     044E  3400               	retlw	0
   422     044F                     STR_9:
   423     044F  3455               	retlw	85	;'U'
   424     0450  3400               	retlw	0
   425     0445                     
   426                           	psect	cinit
   427     0011                     start_initialization:	
   428                           ; #config settings
   429                           
   430     0011                     __initialization:
   431                           
   432                           ; Initialize objects allocated to BANK0
   433     0011  270E               	fcall	__pidataBANK0	;fetch initializer
   434     0012  00BD               	movwf	__pdataBANK0& (0+127)
   435     0013  270F               	fcall	__pidataBANK0+1	;fetch initializer
   436     0014  00BE               	movwf	(__pdataBANK0+1)& (0+127)
   437     0015  2710               	fcall	__pidataBANK0+2	;fetch initializer
   438     0016  00BF               	movwf	(__pdataBANK0+2)& (0+127)
   439     0017  2711               	fcall	__pidataBANK0+3	;fetch initializer
   440     0018  00C0               	movwf	(__pdataBANK0+3)& (0+127)
   441                           
   442                           ; Clear objects allocated to BANK0
   443     0019  1383               	bcf	3,7	;select IRP bank0
   444     001A  3030               	movlw	low __pbssBANK0
   445     001B  0084               	movwf	4
   446     001C  303D               	movlw	low (__pbssBANK0+13)
   447     001D  26FE               	fcall	clear_ram0
   448                           
   449                           ; Clear objects allocated to COMMON
   450     001E  01FC               	clrf	__pbssCOMMON& (0+127)
   451     001F  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   452     0020                     end_of_initialization:	
   453                           ;End of C runtime variable initialization code
   454                           
   455     0020                     __end_of__initialization:
   456     0020  0183               	clrf	3
   457     0021  2F12               	ljmp	_main	;jump to C main() function
   458                           
   459                           	psect	bssCOMMON
   460     007C                     __pbssCOMMON:
   461     007C                     _Data_Length:
   462     007C                     	ds	2
   463                           
   464                           	psect	bssBANK0
   465     0030                     __pbssBANK0:
   466     0030                     _i:
   467     0030                     	ds	2
   468     0032                     _M2Step:
   469     0032                     	ds	2
   470     0034                     _M1Step:
   471     0034                     	ds	2
   472     0036                     _Pressed:
   473     0036                     	ds	2
   474     0038                     _ManualMode:
   475     0038                     	ds	2
   476     003A                     _HC06_Data:
   477     003A                     	ds	3
   478                           
   479                           	psect	dataBANK0
   480     003D                     __pdataBANK0:
   481     003D                     _PWM_Limit:
   482     003D                     	ds	2
   483     003F                     _MotorPWM:
   484     003F                     	ds	2
   485                           
   486                           	psect	clrtext
   487     06FE                     clear_ram0:	
   488                           ;	Called with FSR containing the base address, and
   489                           ;	W with the last address+1
   490                           
   491     06FE  0064               	clrwdt	;clear the watchdog before getting into this loop
   492     06FF                     clrloop0:
   493     06FF  0180               	clrf	0	;clear RAM location pointed to by FSR
   494     0700  0A84               	incf	4,f	;increment pointer
   495     0701  0604               	xorwf	4,w	;XOR with final address
   496     0702  1903               	btfsc	3,2	;have we reached the end yet?
   497     0703  3400               	retlw	0	;all done for this memory range, return
   498     0704  0604               	xorwf	4,w	;XOR again to restore value
   499     0705  2EFF               	goto	clrloop0	;do the next byte
   500                           
   501                           	psect	cstackCOMMON
   502     0070                     __pcstackCOMMON:
   503     0070                     ?_GeneralConfig:
   504     0070                     ?_USARTConfig:	
   505                           ; 1 bytes @ 0x0
   506                           
   507     0070                     ?_HC06Config:	
   508                           ; 1 bytes @ 0x0
   509                           
   510     0070                     ?_ReceiveControl:	
   511                           ; 1 bytes @ 0x0
   512                           
   513     0070                     ?_MoveForward:	
   514                           ; 1 bytes @ 0x0
   515                           
   516     0070                     ?_MoveBackward:	
   517                           ; 1 bytes @ 0x0
   518                           
   519     0070                     ?_MoveLeft:	
   520                           ; 1 bytes @ 0x0
   521                           
   522     0070                     ?_MoveRight:	
   523                           ; 1 bytes @ 0x0
   524                           
   525     0070                     ?_Stop:	
   526                           ; 1 bytes @ 0x0
   527                           
   528     0070                     ?_RobotControl:	
   529                           ; 1 bytes @ 0x0
   530                           
   531     0070                     ?_main:	
   532                           ; 1 bytes @ 0x0
   533                           
   534     0070                     ?_GeneralInterrupt:	
   535                           ; 1 bytes @ 0x0
   536                           
   537     0070                     ?i1_MoveForward:	
   538                           ; 1 bytes @ 0x0
   539                           
   540     0070                     ?i1_MoveBackward:	
   541                           ; 1 bytes @ 0x0
   542                           
   543     0070                     ?i1_MoveLeft:	
   544                           ; 1 bytes @ 0x0
   545                           
   546     0070                     ?i1_MoveRight:	
   547                           ; 1 bytes @ 0x0
   548                           
   549     0070                     ?i1_Stop:	
   550                           ; 1 bytes @ 0x0
   551                           
   552     0070                     ?i1_RobotControl:	
   553                           ; 1 bytes @ 0x0
   554                           
   555     0070                     ?i1_M1Left:	
   556                           ; 1 bytes @ 0x0
   557                           
   558     0070                     ?i1_M1Right:	
   559                           ; 1 bytes @ 0x0
   560                           
   561     0070                     ?i1_M2Left:	
   562                           ; 1 bytes @ 0x0
   563                           
   564     0070                     ?i1_M2Right:	
   565                           ; 1 bytes @ 0x0
   566                           
   567     0070                     ?_USARTRead:	
   568                           ; 1 bytes @ 0x0
   569                           
   570     0070                     ?_DataCompare:	
   571                           ; 2 bytes @ 0x0
   572                           
   573     0070                     ?i1___wmul:	
   574                           ; 2 bytes @ 0x0
   575                           
   576     0070                     DataCompare@Data:	
   577                           ; 2 bytes @ 0x0
   578                           
   579     0070                     i1M1Left@PWM:	
   580                           ; 1 bytes @ 0x0
   581                           
   582     0070                     i1M1Right@PWM:	
   583                           ; 2 bytes @ 0x0
   584                           
   585     0070                     i1M2Left@PWM:	
   586                           ; 2 bytes @ 0x0
   587                           
   588     0070                     i1M2Right@PWM:	
   589                           ; 2 bytes @ 0x0
   590                           
   591     0070                     i1___wmul@multiplier:	
   592                           ; 2 bytes @ 0x0
   593                           
   594                           
   595                           ; 2 bytes @ 0x0
   596     0070                     	ds	1
   597     0071                     DataCompare@length:
   598                           
   599                           ; 2 bytes @ 0x1
   600     0071                     	ds	1
   601     0072                     ??_USARTRead:
   602     0072                     ??i1_M1Left:	
   603                           ; 1 bytes @ 0x2
   604                           
   605     0072                     ??i1_M1Right:	
   606                           ; 1 bytes @ 0x2
   607                           
   608     0072                     ??i1_M2Left:	
   609                           ; 1 bytes @ 0x2
   610                           
   611     0072                     ??i1_M2Right:	
   612                           ; 1 bytes @ 0x2
   613                           
   614     0072                     i1___wmul@multiplicand:	
   615                           ; 1 bytes @ 0x2
   616                           
   617                           
   618                           ; 2 bytes @ 0x2
   619     0072                     	ds	1
   620     0073                     ??_DataCompare:
   621     0073                     ??i1_MoveForward:	
   622                           ; 1 bytes @ 0x3
   623                           
   624     0073                     ??i1_MoveBackward:	
   625                           ; 1 bytes @ 0x3
   626                           
   627     0073                     ??i1_MoveLeft:	
   628                           ; 1 bytes @ 0x3
   629                           
   630     0073                     ??i1_MoveRight:	
   631                           ; 1 bytes @ 0x3
   632                           
   633     0073                     ??i1_Stop:	
   634                           ; 1 bytes @ 0x3
   635                           
   636     0073                     USARTRead@Rxdata:	
   637                           ; 1 bytes @ 0x3
   638                           
   639                           
   640                           ; 1 bytes @ 0x3
   641     0073                     	ds	1
   642     0074                     ??i1___wmul:
   643     0074                     USARTRead@j:	
   644                           ; 1 bytes @ 0x4
   645                           
   646     0074                     i1___wmul@product:	
   647                           ; 2 bytes @ 0x4
   648                           
   649                           
   650                           ; 2 bytes @ 0x4
   651     0074                     	ds	1
   652     0075                     DataCompare@Buffer:
   653                           
   654                           ; 1 bytes @ 0x5
   655     0075                     	ds	1
   656     0076                     ?i1_Delay_Seg:
   657     0076                     DataCompare@i:	
   658                           ; 1 bytes @ 0x6
   659                           
   660     0076                     i1Delay_Seg@j:	
   661                           ; 2 bytes @ 0x6
   662                           
   663                           
   664                           ; 2 bytes @ 0x6
   665     0076                     	ds	2
   666     0078                     ??_ReceiveControl:
   667     0078                     ??i1_Delay_Seg:	
   668                           ; 1 bytes @ 0x8
   669                           
   670     0078                     ReceiveControl@Rxdata:	
   671                           ; 1 bytes @ 0x8
   672                           
   673                           
   674                           ; 1 bytes @ 0x8
   675     0078                     	ds	2
   676     007A                     i1Delay_Seg@i:
   677                           
   678                           ; 2 bytes @ 0xA
   679     007A                     	ds	2
   680     007C                     ??i1_RobotControl:
   681                           
   682                           	psect	cstackBANK0
   683     0020                     __pcstackBANK0:	
   684                           ; 1 bytes @ 0xC
   685                           
   686     0020                     ??_GeneralInterrupt:
   687                           
   688                           ; 1 bytes @ 0x0
   689     0020                     	ds	4
   690     0024                     ?_M1Right:
   691     0024                     ?_M1Left:	
   692                           ; 1 bytes @ 0x4
   693                           
   694     0024                     ?_M2Left:	
   695                           ; 1 bytes @ 0x4
   696                           
   697     0024                     ?_M2Right:	
   698                           ; 1 bytes @ 0x4
   699                           
   700     0024                     ??_USARTConfig:	
   701                           ; 1 bytes @ 0x4
   702                           
   703     0024                     ?_USARTWrite:	
   704                           ; 1 bytes @ 0x4
   705                           
   706     0024                     ?___wmul:	
   707                           ; 1 bytes @ 0x4
   708                           
   709     0024                     M1Left@PWM:	
   710                           ; 2 bytes @ 0x4
   711                           
   712     0024                     M1Right@PWM:	
   713                           ; 2 bytes @ 0x4
   714                           
   715     0024                     M2Left@PWM:	
   716                           ; 2 bytes @ 0x4
   717                           
   718     0024                     M2Right@PWM:	
   719                           ; 2 bytes @ 0x4
   720                           
   721     0024                     USARTWrite@length:	
   722                           ; 2 bytes @ 0x4
   723                           
   724     0024                     ___wmul@multiplier:	
   725                           ; 2 bytes @ 0x4
   726                           
   727                           
   728                           ; 2 bytes @ 0x4
   729     0024                     	ds	2
   730     0026                     ??_M1Right:
   731     0026                     ??_M1Left:	
   732                           ; 1 bytes @ 0x6
   733                           
   734     0026                     ??_M2Left:	
   735                           ; 1 bytes @ 0x6
   736                           
   737     0026                     ??_M2Right:	
   738                           ; 1 bytes @ 0x6
   739                           
   740     0026                     ??_USARTWrite:	
   741                           ; 1 bytes @ 0x6
   742                           
   743     0026                     ___wmul@multiplicand:	
   744                           ; 1 bytes @ 0x6
   745                           
   746                           
   747                           ; 2 bytes @ 0x6
   748     0026                     	ds	1
   749     0027                     ??_MoveForward:
   750     0027                     ??_MoveBackward:	
   751                           ; 1 bytes @ 0x7
   752                           
   753     0027                     ??_MoveLeft:	
   754                           ; 1 bytes @ 0x7
   755                           
   756     0027                     ??_MoveRight:	
   757                           ; 1 bytes @ 0x7
   758                           
   759     0027                     ??_Stop:	
   760                           ; 1 bytes @ 0x7
   761                           
   762     0027                     USARTWrite@i:	
   763                           ; 1 bytes @ 0x7
   764                           
   765                           
   766                           ; 2 bytes @ 0x7
   767     0027                     	ds	1
   768     0028                     ??___wmul:
   769     0028                     ___wmul@product:	
   770                           ; 1 bytes @ 0x8
   771                           
   772                           
   773                           ; 2 bytes @ 0x8
   774     0028                     	ds	1
   775     0029                     USARTWrite@text:
   776                           
   777                           ; 1 bytes @ 0x9
   778     0029                     	ds	1
   779     002A                     ?_Delay_Seg:
   780     002A                     ?_Delay_HalfSeg:	
   781                           ; 1 bytes @ 0xA
   782                           
   783     002A                     Delay_HalfSeg@j:	
   784                           ; 1 bytes @ 0xA
   785                           
   786     002A                     Delay_Seg@j:	
   787                           ; 2 bytes @ 0xA
   788                           
   789                           
   790                           ; 2 bytes @ 0xA
   791     002A                     	ds	2
   792     002C                     ??_Delay_Seg:
   793     002C                     ??_Delay_HalfSeg:	
   794                           ; 1 bytes @ 0xC
   795                           
   796                           
   797                           ; 1 bytes @ 0xC
   798     002C                     	ds	2
   799     002E                     Delay_HalfSeg@i:
   800     002E                     Delay_Seg@i:	
   801                           ; 2 bytes @ 0xE
   802                           
   803                           
   804                           ; 2 bytes @ 0xE
   805     002E                     	ds	2
   806     0030                     ??_GeneralConfig:
   807     0030                     ??_HC06Config:	
   808                           ; 1 bytes @ 0x10
   809                           
   810     0030                     ??_RobotControl:	
   811                           ; 1 bytes @ 0x10
   812                           
   813     0030                     ??_main:	
   814                           ; 1 bytes @ 0x10
   815                           
   816                           
   817                           	psect	maintext
   818     0712                     __pmaintext:	
   819                           ; 1 bytes @ 0x10
   820 ;;
   821 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   822 ;;
   823 ;; *************** function _main *****************
   824 ;; Defined at:
   825 ;;		line 62 in file "DBot_Main.c"
   826 ;; Parameters:    Size  Location     Type
   827 ;;		None
   828 ;; Auto vars:     Size  Location     Type
   829 ;;		None
   830 ;; Return value:  Size  Location     Type
   831 ;;                  1    wreg      void 
   832 ;; Registers used:
   833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   834 ;; Tracked objects:
   835 ;;		On entry : B00/0
   836 ;;		On exit  : 0/0
   837 ;;		Unchanged: 0/0
   838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   839 ;;      Params:         0       0       0       0
   840 ;;      Locals:         0       0       0       0
   841 ;;      Temps:          0       0       0       0
   842 ;;      Totals:         0       0       0       0
   843 ;;Total ram usage:        0 bytes
   844 ;; Hardware stack levels required when called: 8
   845 ;; This function calls:
   846 ;;		_GeneralConfig
   847 ;;		_RobotControl
   848 ;; This function is called by:
   849 ;;		Startup code after reset
   850 ;; This function uses a non-reentrant model
   851 ;;
   852                           
   853     0712                     _main:	
   854                           ;psect for function _main
   855                           
   856                           
   857                           ;DBot_Main.c: 64:     GeneralConfig();
   858                           
   859                           ;incstack = 0
   860                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   861     0712  24C5               	fcall	_GeneralConfig
   862     0713                     l1934:
   863     0713  20A5               	fcall	_RobotControl
   864     0714  2F13               	goto	l1934
   865     0715                     __end_of_main:
   866                           
   867                           	psect	text1
   868     00A5                     __ptext1:	
   869 ;; *************** function _RobotControl *****************
   870 ;; Defined at:
   871 ;;		line 42 in file "Control.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;		None
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/100
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   885 ;;      Params:         0       0       0       0
   886 ;;      Locals:         0       0       0       0
   887 ;;      Temps:          0       0       0       0
   888 ;;      Totals:         0       0       0       0
   889 ;;Total ram usage:        0 bytes
   890 ;; Hardware stack levels used: 1
   891 ;; Hardware stack levels required when called: 6
   892 ;; This function calls:
   893 ;;		_Delay_Seg
   894 ;;		_MoveBackward
   895 ;;		_MoveForward
   896 ;;		_MoveLeft
   897 ;;		_MoveRight
   898 ;;		_Stop
   899 ;; This function is called by:
   900 ;;		_main
   901 ;; This function uses a non-reentrant model
   902 ;;
   903                           
   904     00A5                     _RobotControl:	
   905                           ;psect for function _RobotControl
   906                           
   907                           
   908                           ;Control.c: 45:     if(ManualMode == 1){
   909                           
   910                           ;incstack = 0
   911                           ; Regs used in _RobotControl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   912     00A5  1283               	bcf	3,5	;RP0=0, select bank0
   913     00A6  1303               	bcf	3,6	;RP1=0, select bank0
   914     00A7  0338               	decf	_ManualMode,w
   915     00A8  0439               	iorwf	_ManualMode+1,w
   916     00A9  1D03               	btfss	3,2
   917     00AA  28CC               	goto	l1738
   918                           
   919                           ;Control.c: 47:         if(Pressed == 0){Stop();}
   920     00AB  0836               	movf	_Pressed,w
   921     00AC  0437               	iorwf	_Pressed+1,w
   922     00AD  1D03               	btfss	3,2
   923     00AE  28B1               	goto	l1722
   924     00AF  267A               	fcall	_Stop
   925     00B0  0008               	return
   926     00B1                     l1722:
   927     00B1  0336               	decf	_Pressed,w
   928     00B2  0437               	iorwf	_Pressed+1,w
   929     00B3  1D03               	btfss	3,2
   930     00B4  28B7               	goto	l1726
   931     00B5  2644               	fcall	_MoveForward
   932     00B6  0008               	return
   933     00B7                     l1726:
   934     00B7  3002               	movlw	2
   935     00B8  0636               	xorwf	_Pressed,w
   936     00B9  0437               	iorwf	_Pressed+1,w
   937     00BA  1D03               	btfss	3,2
   938     00BB  28BE               	goto	l1730
   939     00BC  265F               	fcall	_MoveBackward
   940     00BD  0008               	return
   941     00BE                     l1730:
   942     00BE  3003               	movlw	3
   943     00BF  0636               	xorwf	_Pressed,w
   944     00C0  0437               	iorwf	_Pressed+1,w
   945     00C1  1D03               	btfss	3,2
   946     00C2  28C5               	goto	l1734
   947     00C3  2629               	fcall	_MoveLeft
   948     00C4  0008               	return
   949     00C5                     l1734:
   950     00C5  3004               	movlw	4
   951     00C6  0636               	xorwf	_Pressed,w
   952     00C7  0437               	iorwf	_Pressed+1,w
   953     00C8  1D03               	btfss	3,2
   954     00C9  0008               	return
   955     00CA  260E               	fcall	_MoveRight
   956     00CB  0008               	return
   957     00CC                     l1738:
   958     00CC  0838               	movf	_ManualMode,w
   959     00CD  0439               	iorwf	_ManualMode+1,w
   960     00CE  1D03               	btfss	3,2
   961     00CF  0008               	return
   962                           
   963                           ;Control.c: 62:         if(PORTAbits.RA0 == 1 || PORTAbits.RA7 == 1 || PORTBbits.RB5 == 
      +                          0){
   964     00D0  1C05               	btfss	5,0	;volatile
   965     00D1  1B85               	btfsc	5,7	;volatile
   966     00D2  28D5               	goto	l1746
   967     00D3  1A86               	btfsc	6,5	;volatile
   968     00D4  28F1               	goto	l58
   969     00D5                     l1746:
   970                           
   971                           ;Control.c: 66:             if(i<=4){
   972     00D5  0831               	movf	_i+1,w
   973     00D6  3A80               	xorlw	128
   974     00D7  00FF               	movwf	127
   975     00D8  3080               	movlw	128
   976     00D9  027F               	subwf	127,w
   977     00DA  1D03               	skipz
   978     00DB  28DE               	goto	u1735
   979     00DC  3005               	movlw	5
   980     00DD  0230               	subwf	_i,w
   981     00DE                     u1735:
   982     00DE  1803               	skipnc
   983     00DF  28EF               	goto	l1752
   984                           
   985                           ;Control.c: 67:               MoveForward();
   986     00E0  2644               	fcall	_MoveForward
   987     00E1                     L1:
   988                           
   989                           ;Control.c: 68:               Delay_Seg(1);
   990     00E1  3001               	movlw	1
   991     00E2  1283               	bcf	3,5	;RP0=0, select bank0
   992     00E3  1303               	bcf	3,6	;RP1=0, select bank0
   993     00E4  00AA               	movwf	Delay_Seg@j
   994     00E5  3000               	movlw	0
   995     00E6  00AB               	movwf	Delay_Seg@j+1
   996     00E7  24F1               	fcall	_Delay_Seg
   997                           
   998                           ;Control.c: 69:               i++;
   999     00E8  3001               	movlw	1
  1000     00E9  07B0               	addwf	_i,f
  1001     00EA  1803               	skipnc
  1002     00EB  0AB1               	incf	_i+1,f
  1003     00EC  3000               	movlw	0
  1004     00ED  07B1               	addwf	_i+1,f
  1005                           
  1006                           ;Control.c: 70:             }
  1007     00EE  0008               	return
  1008     00EF                     l1752:
  1009                           
  1010                           ;Control.c: 72:               MoveLeft();
  1011     00EF  2629               	fcall	_MoveLeft
  1012     00F0  28E1               	goto	L1
  1013     00F1                     l58:	
  1014                           ;Control.c: 94:         else if(PORTAbits.RA0 == 0 || PORTAbits.RA7 == 0 || PORTBbits.RB
      +                          5 == 1){
  1015                           
  1016                           ;Control.c: 73:               Delay_Seg(1);
  1017                           
  1018     00F1  1805               	btfsc	5,0	;volatile
  1019     00F2  1F85               	btfss	5,7	;volatile
  1020     00F3  28F6               	goto	l1774
  1021     00F4  1E86               	btfss	6,5	;volatile
  1022     00F5  0008               	return
  1023     00F6                     l1774:
  1024                           
  1025                           ;Control.c: 96:             Stop();
  1026     00F6  267A               	fcall	_Stop
  1027                           
  1028                           ;Control.c: 97:             MoveBackward();
  1029     00F7  265F               	fcall	_MoveBackward
  1030                           
  1031                           ;Control.c: 98:             Delay_Seg(2);
  1032     00F8  3002               	movlw	2
  1033     00F9  1283               	bcf	3,5	;RP0=0, select bank0
  1034     00FA  1303               	bcf	3,6	;RP1=0, select bank0
  1035     00FB  00AA               	movwf	Delay_Seg@j
  1036     00FC  3000               	movlw	0
  1037     00FD  00AB               	movwf	Delay_Seg@j+1
  1038     00FE  24F1               	fcall	_Delay_Seg
  1039                           
  1040                           ;Control.c: 99:             Stop();
  1041     00FF  267A               	fcall	_Stop
  1042                           
  1043                           ;Control.c: 100:             MoveRight();
  1044     0100  260E               	fcall	_MoveRight
  1045                           
  1046                           ;Control.c: 101:             Delay_Seg(3);
  1047     0101  3003               	movlw	3
  1048     0102  1283               	bcf	3,5	;RP0=0, select bank0
  1049     0103  1303               	bcf	3,6	;RP1=0, select bank0
  1050     0104  00AA               	movwf	Delay_Seg@j
  1051     0105  3000               	movlw	0
  1052     0106  00AB               	movwf	Delay_Seg@j+1
  1053     0107  24F1               	fcall	_Delay_Seg
  1054                           
  1055                           ;Control.c: 102:             Stop();
  1056     0108  267A               	fcall	_Stop
  1057     0109  0008               	return
  1058     010A                     __end_of_RobotControl:
  1059                           
  1060                           	psect	text2
  1061     067A                     __ptext2:	
  1062 ;; *************** function _Stop *****************
  1063 ;; Defined at:
  1064 ;;		line 35 in file "Control.c"
  1065 ;; Parameters:    Size  Location     Type
  1066 ;;		None
  1067 ;; Auto vars:     Size  Location     Type
  1068 ;;		None
  1069 ;; Return value:  Size  Location     Type
  1070 ;;                  1    wreg      void 
  1071 ;; Registers used:
  1072 ;;		wreg, status,2, status,0, pclath, cstack
  1073 ;; Tracked objects:
  1074 ;;		On entry : 300/0
  1075 ;;		On exit  : 0/0
  1076 ;;		Unchanged: 0/0
  1077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1078 ;;      Params:         0       0       0       0
  1079 ;;      Locals:         0       0       0       0
  1080 ;;      Temps:          0       0       0       0
  1081 ;;      Totals:         0       0       0       0
  1082 ;;Total ram usage:        0 bytes
  1083 ;; Hardware stack levels used: 1
  1084 ;; Hardware stack levels required when called: 5
  1085 ;; This function calls:
  1086 ;;		_M1Left
  1087 ;;		_M1Right
  1088 ;;		_M2Left
  1089 ;;		_M2Right
  1090 ;; This function is called by:
  1091 ;;		_RobotControl
  1092 ;; This function uses a non-reentrant model
  1093 ;;
  1094                           
  1095     067A                     _Stop:	
  1096                           ;psect for function _Stop
  1097                           
  1098                           
  1099                           ;Control.c: 36:     M1Left(0);
  1100                           
  1101                           ;incstack = 0
  1102                           ; Regs used in _Stop: [wreg+status,2+status,0+pclath+cstack]
  1103     067A  3000               	movlw	0
  1104     067B  00A4               	movwf	M1Left@PWM
  1105     067C  00A5               	movwf	M1Left@PWM+1
  1106     067D  23BE               	fcall	_M1Left
  1107                           
  1108                           ;Control.c: 37:     M1Right(0);
  1109     067E  3000               	movlw	0
  1110     067F  1283               	bcf	3,5	;RP0=0, select bank0
  1111     0680  1303               	bcf	3,6	;RP1=0, select bank0
  1112     0681  00A4               	movwf	M1Right@PWM
  1113     0682  00A5               	movwf	M1Right@PWM+1
  1114     0683  236B               	fcall	_M1Right
  1115                           
  1116                           ;Control.c: 38:     M2Left(0);
  1117     0684  3000               	movlw	0
  1118     0685  1283               	bcf	3,5	;RP0=0, select bank0
  1119     0686  1303               	bcf	3,6	;RP1=0, select bank0
  1120     0687  00A4               	movwf	M2Left@PWM
  1121     0688  00A5               	movwf	M2Left@PWM+1
  1122     0689  2318               	fcall	_M2Left
  1123                           
  1124                           ;Control.c: 39:     M2Right(0);
  1125     068A  3000               	movlw	0
  1126     068B  1283               	bcf	3,5	;RP0=0, select bank0
  1127     068C  1303               	bcf	3,6	;RP1=0, select bank0
  1128     068D  00A4               	movwf	M2Right@PWM
  1129     068E  00A5               	movwf	M2Right@PWM+1
  1130     068F  22C5               	fcall	_M2Right
  1131     0690  0008               	return
  1132     0691                     __end_of_Stop:
  1133                           
  1134                           	psect	text3
  1135     060E                     __ptext3:	
  1136 ;; *************** function _MoveRight *****************
  1137 ;; Defined at:
  1138 ;;		line 28 in file "Control.c"
  1139 ;; Parameters:    Size  Location     Type
  1140 ;;		None
  1141 ;; Auto vars:     Size  Location     Type
  1142 ;;		None
  1143 ;; Return value:  Size  Location     Type
  1144 ;;                  1    wreg      void 
  1145 ;; Registers used:
  1146 ;;		wreg, status,2, status,0, pclath, cstack
  1147 ;; Tracked objects:
  1148 ;;		On entry : 0/0
  1149 ;;		On exit  : 0/0
  1150 ;;		Unchanged: 0/0
  1151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1152 ;;      Params:         0       0       0       0
  1153 ;;      Locals:         0       0       0       0
  1154 ;;      Temps:          0       0       0       0
  1155 ;;      Totals:         0       0       0       0
  1156 ;;Total ram usage:        0 bytes
  1157 ;; Hardware stack levels used: 1
  1158 ;; Hardware stack levels required when called: 5
  1159 ;; This function calls:
  1160 ;;		_M1Left
  1161 ;;		_M1Right
  1162 ;;		_M2Left
  1163 ;;		_M2Right
  1164 ;; This function is called by:
  1165 ;;		_RobotControl
  1166 ;; This function uses a non-reentrant model
  1167 ;;
  1168                           
  1169     060E                     _MoveRight:	
  1170                           ;psect for function _MoveRight
  1171                           
  1172                           
  1173                           ;Control.c: 29:     M1Left(0);
  1174                           
  1175                           ;incstack = 0
  1176                           ; Regs used in _MoveRight: [wreg+status,2+status,0+pclath+cstack]
  1177     060E  3000               	movlw	0
  1178     060F  1283               	bcf	3,5	;RP0=0, select bank0
  1179     0610  1303               	bcf	3,6	;RP1=0, select bank0
  1180     0611  00A4               	movwf	M1Left@PWM
  1181     0612  00A5               	movwf	M1Left@PWM+1
  1182     0613  23BE               	fcall	_M1Left
  1183                           
  1184                           ;Control.c: 30:     M1Right(MotorPWM);
  1185     0614  1283               	bcf	3,5	;RP0=0, select bank0
  1186     0615  1303               	bcf	3,6	;RP1=0, select bank0
  1187     0616  0840               	movf	_MotorPWM+1,w
  1188     0617  00A5               	movwf	M1Right@PWM+1
  1189     0618  083F               	movf	_MotorPWM,w
  1190     0619  00A4               	movwf	M1Right@PWM
  1191     061A  236B               	fcall	_M1Right
  1192                           
  1193                           ;Control.c: 31:     M2Left(0);
  1194     061B  3000               	movlw	0
  1195     061C  1283               	bcf	3,5	;RP0=0, select bank0
  1196     061D  1303               	bcf	3,6	;RP1=0, select bank0
  1197     061E  00A4               	movwf	M2Left@PWM
  1198     061F  00A5               	movwf	M2Left@PWM+1
  1199     0620  2318               	fcall	_M2Left
  1200                           
  1201                           ;Control.c: 32:     M2Right(MotorPWM);
  1202     0621  1283               	bcf	3,5	;RP0=0, select bank0
  1203     0622  1303               	bcf	3,6	;RP1=0, select bank0
  1204     0623  0840               	movf	_MotorPWM+1,w
  1205     0624  00A5               	movwf	M2Right@PWM+1
  1206     0625  083F               	movf	_MotorPWM,w
  1207     0626  00A4               	movwf	M2Right@PWM
  1208     0627  22C5               	fcall	_M2Right
  1209     0628  0008               	return
  1210     0629                     __end_of_MoveRight:
  1211                           
  1212                           	psect	text4
  1213     0629                     __ptext4:	
  1214 ;; *************** function _MoveLeft *****************
  1215 ;; Defined at:
  1216 ;;		line 20 in file "Control.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      void 
  1223 ;; Registers used:
  1224 ;;		wreg, status,2, status,0, pclath, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1230 ;;      Params:         0       0       0       0
  1231 ;;      Locals:         0       0       0       0
  1232 ;;      Temps:          0       0       0       0
  1233 ;;      Totals:         0       0       0       0
  1234 ;;Total ram usage:        0 bytes
  1235 ;; Hardware stack levels used: 1
  1236 ;; Hardware stack levels required when called: 5
  1237 ;; This function calls:
  1238 ;;		_M1Left
  1239 ;;		_M1Right
  1240 ;;		_M2Left
  1241 ;;		_M2Right
  1242 ;; This function is called by:
  1243 ;;		_RobotControl
  1244 ;; This function uses a non-reentrant model
  1245 ;;
  1246                           
  1247     0629                     _MoveLeft:	
  1248                           ;psect for function _MoveLeft
  1249                           
  1250                           
  1251                           ;Control.c: 21:     M1Left(0);
  1252                           
  1253                           ;incstack = 0
  1254                           ; Regs used in _MoveLeft: [wreg+status,2+status,0+pclath+cstack]
  1255     0629  3000               	movlw	0
  1256     062A  1283               	bcf	3,5	;RP0=0, select bank0
  1257     062B  1303               	bcf	3,6	;RP1=0, select bank0
  1258     062C  00A4               	movwf	M1Left@PWM
  1259     062D  00A5               	movwf	M1Left@PWM+1
  1260     062E  23BE               	fcall	_M1Left
  1261                           
  1262                           ;Control.c: 22:     M1Right(MotorPWM);
  1263     062F  1283               	bcf	3,5	;RP0=0, select bank0
  1264     0630  1303               	bcf	3,6	;RP1=0, select bank0
  1265     0631  0840               	movf	_MotorPWM+1,w
  1266     0632  00A5               	movwf	M1Right@PWM+1
  1267     0633  083F               	movf	_MotorPWM,w
  1268     0634  00A4               	movwf	M1Right@PWM
  1269     0635  236B               	fcall	_M1Right
  1270                           
  1271                           ;Control.c: 23:     M2Right(0);
  1272     0636  3000               	movlw	0
  1273     0637  1283               	bcf	3,5	;RP0=0, select bank0
  1274     0638  1303               	bcf	3,6	;RP1=0, select bank0
  1275     0639  00A4               	movwf	M2Right@PWM
  1276     063A  00A5               	movwf	M2Right@PWM+1
  1277     063B  22C5               	fcall	_M2Right
  1278                           
  1279                           ;Control.c: 24:     M2Left(MotorPWM);
  1280     063C  1283               	bcf	3,5	;RP0=0, select bank0
  1281     063D  1303               	bcf	3,6	;RP1=0, select bank0
  1282     063E  0840               	movf	_MotorPWM+1,w
  1283     063F  00A5               	movwf	M2Left@PWM+1
  1284     0640  083F               	movf	_MotorPWM,w
  1285     0641  00A4               	movwf	M2Left@PWM
  1286     0642  2318               	fcall	_M2Left
  1287     0643  0008               	return
  1288     0644                     __end_of_MoveLeft:
  1289                           
  1290                           	psect	text5
  1291     0644                     __ptext5:	
  1292 ;; *************** function _MoveForward *****************
  1293 ;; Defined at:
  1294 ;;		line 6 in file "Control.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;		None
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;		None
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, status,2, status,0, pclath, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1308 ;;      Params:         0       0       0       0
  1309 ;;      Locals:         0       0       0       0
  1310 ;;      Temps:          0       0       0       0
  1311 ;;      Totals:         0       0       0       0
  1312 ;;Total ram usage:        0 bytes
  1313 ;; Hardware stack levels used: 1
  1314 ;; Hardware stack levels required when called: 5
  1315 ;; This function calls:
  1316 ;;		_M1Left
  1317 ;;		_M1Right
  1318 ;;		_M2Left
  1319 ;;		_M2Right
  1320 ;; This function is called by:
  1321 ;;		_RobotControl
  1322 ;; This function uses a non-reentrant model
  1323 ;;
  1324                           
  1325     0644                     _MoveForward:	
  1326                           ;psect for function _MoveForward
  1327                           
  1328                           
  1329                           ;Control.c: 7:     M1Right(0);
  1330                           
  1331                           ;incstack = 0
  1332                           ; Regs used in _MoveForward: [wreg+status,2+status,0+pclath+cstack]
  1333     0644  3000               	movlw	0
  1334     0645  1283               	bcf	3,5	;RP0=0, select bank0
  1335     0646  1303               	bcf	3,6	;RP1=0, select bank0
  1336     0647  00A4               	movwf	M1Right@PWM
  1337     0648  00A5               	movwf	M1Right@PWM+1
  1338     0649  236B               	fcall	_M1Right
  1339                           
  1340                           ;Control.c: 8:     M1Left(MotorPWM);
  1341     064A  1283               	bcf	3,5	;RP0=0, select bank0
  1342     064B  1303               	bcf	3,6	;RP1=0, select bank0
  1343     064C  0840               	movf	_MotorPWM+1,w
  1344     064D  00A5               	movwf	M1Left@PWM+1
  1345     064E  083F               	movf	_MotorPWM,w
  1346     064F  00A4               	movwf	M1Left@PWM
  1347     0650  23BE               	fcall	_M1Left
  1348                           
  1349                           ;Control.c: 9:     M2Left(0);
  1350     0651  3000               	movlw	0
  1351     0652  1283               	bcf	3,5	;RP0=0, select bank0
  1352     0653  1303               	bcf	3,6	;RP1=0, select bank0
  1353     0654  00A4               	movwf	M2Left@PWM
  1354     0655  00A5               	movwf	M2Left@PWM+1
  1355     0656  2318               	fcall	_M2Left
  1356                           
  1357                           ;Control.c: 10:     M2Right(MotorPWM);
  1358     0657  1283               	bcf	3,5	;RP0=0, select bank0
  1359     0658  1303               	bcf	3,6	;RP1=0, select bank0
  1360     0659  0840               	movf	_MotorPWM+1,w
  1361     065A  00A5               	movwf	M2Right@PWM+1
  1362     065B  083F               	movf	_MotorPWM,w
  1363     065C  00A4               	movwf	M2Right@PWM
  1364     065D  22C5               	fcall	_M2Right
  1365     065E  0008               	return
  1366     065F                     __end_of_MoveForward:
  1367                           
  1368                           	psect	text6
  1369     065F                     __ptext6:	
  1370 ;; *************** function _MoveBackward *****************
  1371 ;; Defined at:
  1372 ;;		line 13 in file "Control.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2, status,0, pclath, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1386 ;;      Params:         0       0       0       0
  1387 ;;      Locals:         0       0       0       0
  1388 ;;      Temps:          0       0       0       0
  1389 ;;      Totals:         0       0       0       0
  1390 ;;Total ram usage:        0 bytes
  1391 ;; Hardware stack levels used: 1
  1392 ;; Hardware stack levels required when called: 5
  1393 ;; This function calls:
  1394 ;;		_M1Left
  1395 ;;		_M1Right
  1396 ;;		_M2Left
  1397 ;;		_M2Right
  1398 ;; This function is called by:
  1399 ;;		_RobotControl
  1400 ;; This function uses a non-reentrant model
  1401 ;;
  1402                           
  1403     065F                     _MoveBackward:	
  1404                           ;psect for function _MoveBackward
  1405                           
  1406                           
  1407                           ;Control.c: 14:     M1Left(0);
  1408                           
  1409                           ;incstack = 0
  1410                           ; Regs used in _MoveBackward: [wreg+status,2+status,0+pclath+cstack]
  1411     065F  3000               	movlw	0
  1412     0660  1283               	bcf	3,5	;RP0=0, select bank0
  1413     0661  1303               	bcf	3,6	;RP1=0, select bank0
  1414     0662  00A4               	movwf	M1Left@PWM
  1415     0663  00A5               	movwf	M1Left@PWM+1
  1416     0664  23BE               	fcall	_M1Left
  1417                           
  1418                           ;Control.c: 15:     M1Right(MotorPWM);
  1419     0665  1283               	bcf	3,5	;RP0=0, select bank0
  1420     0666  1303               	bcf	3,6	;RP1=0, select bank0
  1421     0667  0840               	movf	_MotorPWM+1,w
  1422     0668  00A5               	movwf	M1Right@PWM+1
  1423     0669  083F               	movf	_MotorPWM,w
  1424     066A  00A4               	movwf	M1Right@PWM
  1425     066B  236B               	fcall	_M1Right
  1426                           
  1427                           ;Control.c: 16:     M2Right(0);
  1428     066C  3000               	movlw	0
  1429     066D  1283               	bcf	3,5	;RP0=0, select bank0
  1430     066E  1303               	bcf	3,6	;RP1=0, select bank0
  1431     066F  00A4               	movwf	M2Right@PWM
  1432     0670  00A5               	movwf	M2Right@PWM+1
  1433     0671  22C5               	fcall	_M2Right
  1434                           
  1435                           ;Control.c: 17:     M2Left(MotorPWM);
  1436     0672  1283               	bcf	3,5	;RP0=0, select bank0
  1437     0673  1303               	bcf	3,6	;RP1=0, select bank0
  1438     0674  0840               	movf	_MotorPWM+1,w
  1439     0675  00A5               	movwf	M2Left@PWM+1
  1440     0676  083F               	movf	_MotorPWM,w
  1441     0677  00A4               	movwf	M2Left@PWM
  1442     0678  2318               	fcall	_M2Left
  1443     0679  0008               	return
  1444     067A                     __end_of_MoveBackward:
  1445                           
  1446                           	psect	text7
  1447     02C5                     __ptext7:	
  1448 ;; *************** function _M2Right *****************
  1449 ;; Defined at:
  1450 ;;		line 73 in file "PWM.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  PWM             2    4[BANK0 ] int 
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;		None
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  1    wreg      void 
  1457 ;; Registers used:
  1458 ;;		wreg, status,2, status,0
  1459 ;; Tracked objects:
  1460 ;;		On entry : 300/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1464 ;;      Params:         0       2       0       0
  1465 ;;      Locals:         0       0       0       0
  1466 ;;      Temps:          0       1       0       0
  1467 ;;      Totals:         0       3       0       0
  1468 ;;Total ram usage:        3 bytes
  1469 ;; Hardware stack levels used: 1
  1470 ;; Hardware stack levels required when called: 4
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		_MoveForward
  1475 ;;		_MoveBackward
  1476 ;;		_MoveLeft
  1477 ;;		_MoveRight
  1478 ;;		_Stop
  1479 ;; This function uses a non-reentrant model
  1480 ;;
  1481                           
  1482     02C5                     _M2Right:	
  1483                           ;psect for function _M2Right
  1484                           
  1485                           
  1486                           ;PWM.c: 75:     if(PWM == 0){PORTAbits.RA2 = 1;}
  1487                           
  1488                           ;incstack = 0
  1489                           ; Regs used in _M2Right: [wreg+status,2+status,0]
  1490     02C5  0824               	movf	M2Right@PWM,w
  1491     02C6  0425               	iorwf	M2Right@PWM+1,w
  1492     02C7  1D03               	btfss	3,2
  1493     02C8  2ACB               	goto	l1514
  1494     02C9  1505               	bsf	5,2	;volatile
  1495     02CA  0008               	return
  1496     02CB                     l1514:
  1497     02CB  0825               	movf	M2Right@PWM+1,w
  1498     02CC  3A80               	xorlw	128
  1499     02CD  00A6               	movwf	??_M2Right
  1500     02CE  083E               	movf	_PWM_Limit+1,w
  1501     02CF  3A80               	xorlw	128
  1502     02D0  0226               	subwf	??_M2Right,w
  1503     02D1  1D03               	skipz
  1504     02D2  2AD5               	goto	u1225
  1505     02D3  083D               	movf	_PWM_Limit,w
  1506     02D4  0224               	subwf	M2Right@PWM,w
  1507     02D5                     u1225:
  1508     02D5  1803               	skipnc
  1509     02D6  2B14               	goto	l221
  1510                           
  1511                           ;PWM.c: 79:         if(M2Step < PWM){
  1512     02D7  1283               	bcf	3,5	;RP0=0, select bank0
  1513     02D8  1303               	bcf	3,6	;RP1=0, select bank0
  1514     02D9  0833               	movf	_M2Step+1,w
  1515     02DA  3A80               	xorlw	128
  1516     02DB  00A6               	movwf	??_M2Right
  1517     02DC  0825               	movf	M2Right@PWM+1,w
  1518     02DD  3A80               	xorlw	128
  1519     02DE  0226               	subwf	??_M2Right,w
  1520     02DF  1D03               	skipz
  1521     02E0  2AE3               	goto	u1235
  1522     02E1  0824               	movf	M2Right@PWM,w
  1523     02E2  0232               	subwf	_M2Step,w
  1524     02E3                     u1235:
  1525     02E3  1803               	skipnc
  1526     02E4  2AF3               	goto	l1522
  1527                           
  1528                           ;PWM.c: 80:             PORTAbits.RA2 = 0;
  1529     02E5  1283               	bcf	3,5	;RP0=0, select bank0
  1530     02E6  1303               	bcf	3,6	;RP1=0, select bank0
  1531     02E7  1105               	bcf	5,2	;volatile
  1532     02E8  2AEC               	goto	l1520
  1533     02E9                     l1524:
  1534                           
  1535                           ;PWM.c: 84:             PORTAbits.RA2 = 1;
  1536     02E9  1283               	bcf	3,5	;RP0=0, select bank0
  1537     02EA  1303               	bcf	3,6	;RP1=0, select bank0
  1538     02EB  1505               	bsf	5,2	;volatile
  1539     02EC                     l1520:
  1540                           
  1541                           ;PWM.c: 81:             M2Step++;
  1542     02EC  3001               	movlw	1
  1543     02ED  07B2               	addwf	_M2Step,f
  1544     02EE  1803               	skipnc
  1545     02EF  0AB3               	incf	_M2Step+1,f
  1546     02F0  3000               	movlw	0
  1547     02F1  07B3               	addwf	_M2Step+1,f
  1548                           
  1549                           ;PWM.c: 82:         }
  1550     02F2  0008               	return
  1551     02F3                     l1522:
  1552     02F3  1283               	bcf	3,5	;RP0=0, select bank0
  1553     02F4  1303               	bcf	3,6	;RP1=0, select bank0
  1554     02F5  0833               	movf	_M2Step+1,w
  1555     02F6  3A80               	xorlw	128
  1556     02F7  00A6               	movwf	??_M2Right
  1557     02F8  083E               	movf	_PWM_Limit+1,w
  1558     02F9  3A80               	xorlw	128
  1559     02FA  0226               	subwf	??_M2Right,w
  1560     02FB  1D03               	skipz
  1561     02FC  2AFF               	goto	u1245
  1562     02FD  083D               	movf	_PWM_Limit,w
  1563     02FE  0232               	subwf	_M2Step,w
  1564     02FF                     u1245:
  1565     02FF  1C03               	btfss	3,0
  1566     0300  2AE9               	goto	l1524
  1567     0301  1283               	bcf	3,5	;RP0=0, select bank0
  1568     0302  1303               	bcf	3,6	;RP1=0, select bank0
  1569     0303  0833               	movf	_M2Step+1,w
  1570     0304  3A80               	xorlw	128
  1571     0305  00A6               	movwf	??_M2Right
  1572     0306  083E               	movf	_PWM_Limit+1,w
  1573     0307  3A80               	xorlw	128
  1574     0308  0226               	subwf	??_M2Right,w
  1575     0309  1D03               	skipz
  1576     030A  2B0D               	goto	u1255
  1577     030B  083D               	movf	_PWM_Limit,w
  1578     030C  0232               	subwf	_M2Step,w
  1579     030D                     u1255:
  1580     030D  1C03               	skipc
  1581     030E  0008               	return
  1582                           
  1583                           ;PWM.c: 88:             M2Step=0;
  1584     030F  1283               	bcf	3,5	;RP0=0, select bank0
  1585     0310  1303               	bcf	3,6	;RP1=0, select bank0
  1586     0311  01B2               	clrf	_M2Step
  1587     0312  01B3               	clrf	_M2Step+1
  1588     0313  0008               	return
  1589     0314                     l221:	
  1590                           ;PWM.c: 92:     else {PORTAbits.RA2=0;}
  1591                           
  1592     0314  1283               	bcf	3,5	;RP0=0, select bank0
  1593     0315  1303               	bcf	3,6	;RP1=0, select bank0
  1594     0316  1105               	bcf	5,2	;volatile
  1595     0317  0008               	return
  1596     0318                     __end_of_M2Right:
  1597                           
  1598                           	psect	text8
  1599     0318                     __ptext8:	
  1600 ;; *************** function _M2Left *****************
  1601 ;; Defined at:
  1602 ;;		line 50 in file "PWM.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  PWM             2    4[BANK0 ] int 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;		None
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, status,0
  1611 ;; Tracked objects:
  1612 ;;		On entry : 300/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1616 ;;      Params:         0       2       0       0
  1617 ;;      Locals:         0       0       0       0
  1618 ;;      Temps:          0       1       0       0
  1619 ;;      Totals:         0       3       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used: 1
  1622 ;; Hardware stack levels required when called: 4
  1623 ;; This function calls:
  1624 ;;		Nothing
  1625 ;; This function is called by:
  1626 ;;		_MoveForward
  1627 ;;		_MoveBackward
  1628 ;;		_MoveLeft
  1629 ;;		_MoveRight
  1630 ;;		_Stop
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634     0318                     _M2Left:	
  1635                           ;psect for function _M2Left
  1636                           
  1637                           
  1638                           ;PWM.c: 52:     if(PWM == 0){PORTAbits.RA3 = 1;}
  1639                           
  1640                           ;incstack = 0
  1641                           ; Regs used in _M2Left: [wreg+status,2+status,0]
  1642     0318  0824               	movf	M2Left@PWM,w
  1643     0319  0425               	iorwf	M2Left@PWM+1,w
  1644     031A  1D03               	btfss	3,2
  1645     031B  2B1E               	goto	l1492
  1646     031C  1585               	bsf	5,3	;volatile
  1647     031D  0008               	return
  1648     031E                     l1492:
  1649     031E  0825               	movf	M2Left@PWM+1,w
  1650     031F  3A80               	xorlw	128
  1651     0320  00A6               	movwf	??_M2Left
  1652     0321  083E               	movf	_PWM_Limit+1,w
  1653     0322  3A80               	xorlw	128
  1654     0323  0226               	subwf	??_M2Left,w
  1655     0324  1D03               	skipz
  1656     0325  2B28               	goto	u1175
  1657     0326  083D               	movf	_PWM_Limit,w
  1658     0327  0224               	subwf	M2Left@PWM,w
  1659     0328                     u1175:
  1660     0328  1803               	skipnc
  1661     0329  2B67               	goto	l209
  1662                           
  1663                           ;PWM.c: 56:         if(M2Step < PWM){
  1664     032A  1283               	bcf	3,5	;RP0=0, select bank0
  1665     032B  1303               	bcf	3,6	;RP1=0, select bank0
  1666     032C  0833               	movf	_M2Step+1,w
  1667     032D  3A80               	xorlw	128
  1668     032E  00A6               	movwf	??_M2Left
  1669     032F  0825               	movf	M2Left@PWM+1,w
  1670     0330  3A80               	xorlw	128
  1671     0331  0226               	subwf	??_M2Left,w
  1672     0332  1D03               	skipz
  1673     0333  2B36               	goto	u1185
  1674     0334  0824               	movf	M2Left@PWM,w
  1675     0335  0232               	subwf	_M2Step,w
  1676     0336                     u1185:
  1677     0336  1803               	skipnc
  1678     0337  2B46               	goto	l1500
  1679                           
  1680                           ;PWM.c: 57:             PORTAbits.RA3 = 0;
  1681     0338  1283               	bcf	3,5	;RP0=0, select bank0
  1682     0339  1303               	bcf	3,6	;RP1=0, select bank0
  1683     033A  1185               	bcf	5,3	;volatile
  1684     033B  2B3F               	goto	l1498
  1685     033C                     l1502:
  1686                           
  1687                           ;PWM.c: 61:             PORTAbits.RA3 = 1;
  1688     033C  1283               	bcf	3,5	;RP0=0, select bank0
  1689     033D  1303               	bcf	3,6	;RP1=0, select bank0
  1690     033E  1585               	bsf	5,3	;volatile
  1691     033F                     l1498:
  1692                           
  1693                           ;PWM.c: 58:             M2Step++;
  1694     033F  3001               	movlw	1
  1695     0340  07B2               	addwf	_M2Step,f
  1696     0341  1803               	skipnc
  1697     0342  0AB3               	incf	_M2Step+1,f
  1698     0343  3000               	movlw	0
  1699     0344  07B3               	addwf	_M2Step+1,f
  1700                           
  1701                           ;PWM.c: 59:         }
  1702     0345  0008               	return
  1703     0346                     l1500:
  1704     0346  1283               	bcf	3,5	;RP0=0, select bank0
  1705     0347  1303               	bcf	3,6	;RP1=0, select bank0
  1706     0348  0833               	movf	_M2Step+1,w
  1707     0349  3A80               	xorlw	128
  1708     034A  00A6               	movwf	??_M2Left
  1709     034B  083E               	movf	_PWM_Limit+1,w
  1710     034C  3A80               	xorlw	128
  1711     034D  0226               	subwf	??_M2Left,w
  1712     034E  1D03               	skipz
  1713     034F  2B52               	goto	u1195
  1714     0350  083D               	movf	_PWM_Limit,w
  1715     0351  0232               	subwf	_M2Step,w
  1716     0352                     u1195:
  1717     0352  1C03               	btfss	3,0
  1718     0353  2B3C               	goto	l1502
  1719     0354  1283               	bcf	3,5	;RP0=0, select bank0
  1720     0355  1303               	bcf	3,6	;RP1=0, select bank0
  1721     0356  0833               	movf	_M2Step+1,w
  1722     0357  3A80               	xorlw	128
  1723     0358  00A6               	movwf	??_M2Left
  1724     0359  083E               	movf	_PWM_Limit+1,w
  1725     035A  3A80               	xorlw	128
  1726     035B  0226               	subwf	??_M2Left,w
  1727     035C  1D03               	skipz
  1728     035D  2B60               	goto	u1205
  1729     035E  083D               	movf	_PWM_Limit,w
  1730     035F  0232               	subwf	_M2Step,w
  1731     0360                     u1205:
  1732     0360  1C03               	skipc
  1733     0361  0008               	return
  1734                           
  1735                           ;PWM.c: 65:             M2Step=0;
  1736     0362  1283               	bcf	3,5	;RP0=0, select bank0
  1737     0363  1303               	bcf	3,6	;RP1=0, select bank0
  1738     0364  01B2               	clrf	_M2Step
  1739     0365  01B3               	clrf	_M2Step+1
  1740     0366  0008               	return
  1741     0367                     l209:	
  1742                           ;PWM.c: 69:     else {PORTAbits.RA3=0;}
  1743                           
  1744     0367  1283               	bcf	3,5	;RP0=0, select bank0
  1745     0368  1303               	bcf	3,6	;RP1=0, select bank0
  1746     0369  1185               	bcf	5,3	;volatile
  1747     036A  0008               	return
  1748     036B                     __end_of_M2Left:
  1749                           
  1750                           	psect	text9
  1751     036B                     __ptext9:	
  1752 ;; *************** function _M1Right *****************
  1753 ;; Defined at:
  1754 ;;		line 27 in file "PWM.c"
  1755 ;; Parameters:    Size  Location     Type
  1756 ;;  PWM             2    4[BANK0 ] int 
  1757 ;; Auto vars:     Size  Location     Type
  1758 ;;		None
  1759 ;; Return value:  Size  Location     Type
  1760 ;;                  1    wreg      void 
  1761 ;; Registers used:
  1762 ;;		wreg, status,2, status,0
  1763 ;; Tracked objects:
  1764 ;;		On entry : 300/0
  1765 ;;		On exit  : 0/0
  1766 ;;		Unchanged: 0/0
  1767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1768 ;;      Params:         0       2       0       0
  1769 ;;      Locals:         0       0       0       0
  1770 ;;      Temps:          0       1       0       0
  1771 ;;      Totals:         0       3       0       0
  1772 ;;Total ram usage:        3 bytes
  1773 ;; Hardware stack levels used: 1
  1774 ;; Hardware stack levels required when called: 4
  1775 ;; This function calls:
  1776 ;;		Nothing
  1777 ;; This function is called by:
  1778 ;;		_MoveForward
  1779 ;;		_MoveBackward
  1780 ;;		_MoveLeft
  1781 ;;		_MoveRight
  1782 ;;		_Stop
  1783 ;; This function uses a non-reentrant model
  1784 ;;
  1785                           
  1786     036B                     _M1Right:	
  1787                           ;psect for function _M1Right
  1788                           
  1789                           
  1790                           ;PWM.c: 29:     if(PWM == 0){PORTBbits.RB0 = 1;}
  1791                           
  1792                           ;incstack = 0
  1793                           ; Regs used in _M1Right: [wreg+status,2+status,0]
  1794     036B  0824               	movf	M1Right@PWM,w
  1795     036C  0425               	iorwf	M1Right@PWM+1,w
  1796     036D  1D03               	btfss	3,2
  1797     036E  2B71               	goto	l1448
  1798     036F  1406               	bsf	6,0	;volatile
  1799     0370  0008               	return
  1800     0371                     l1448:
  1801     0371  0825               	movf	M1Right@PWM+1,w
  1802     0372  3A80               	xorlw	128
  1803     0373  00A6               	movwf	??_M1Right
  1804     0374  083E               	movf	_PWM_Limit+1,w
  1805     0375  3A80               	xorlw	128
  1806     0376  0226               	subwf	??_M1Right,w
  1807     0377  1D03               	skipz
  1808     0378  2B7B               	goto	u1075
  1809     0379  083D               	movf	_PWM_Limit,w
  1810     037A  0224               	subwf	M1Right@PWM,w
  1811     037B                     u1075:
  1812     037B  1803               	skipnc
  1813     037C  2BBA               	goto	l197
  1814                           
  1815                           ;PWM.c: 33:         if(M1Step < PWM){
  1816     037D  1283               	bcf	3,5	;RP0=0, select bank0
  1817     037E  1303               	bcf	3,6	;RP1=0, select bank0
  1818     037F  0835               	movf	_M1Step+1,w
  1819     0380  3A80               	xorlw	128
  1820     0381  00A6               	movwf	??_M1Right
  1821     0382  0825               	movf	M1Right@PWM+1,w
  1822     0383  3A80               	xorlw	128
  1823     0384  0226               	subwf	??_M1Right,w
  1824     0385  1D03               	skipz
  1825     0386  2B89               	goto	u1085
  1826     0387  0824               	movf	M1Right@PWM,w
  1827     0388  0234               	subwf	_M1Step,w
  1828     0389                     u1085:
  1829     0389  1803               	skipnc
  1830     038A  2B99               	goto	l1456
  1831                           
  1832                           ;PWM.c: 34:             PORTBbits.RB0 = 0;
  1833     038B  1283               	bcf	3,5	;RP0=0, select bank0
  1834     038C  1303               	bcf	3,6	;RP1=0, select bank0
  1835     038D  1006               	bcf	6,0	;volatile
  1836     038E  2B92               	goto	l1454
  1837     038F                     l1458:
  1838                           
  1839                           ;PWM.c: 38:             PORTBbits.RB0 = 1;
  1840     038F  1283               	bcf	3,5	;RP0=0, select bank0
  1841     0390  1303               	bcf	3,6	;RP1=0, select bank0
  1842     0391  1406               	bsf	6,0	;volatile
  1843     0392                     l1454:
  1844                           
  1845                           ;PWM.c: 35:             M1Step++;
  1846     0392  3001               	movlw	1
  1847     0393  07B4               	addwf	_M1Step,f
  1848     0394  1803               	skipnc
  1849     0395  0AB5               	incf	_M1Step+1,f
  1850     0396  3000               	movlw	0
  1851     0397  07B5               	addwf	_M1Step+1,f
  1852                           
  1853                           ;PWM.c: 36:         }
  1854     0398  0008               	return
  1855     0399                     l1456:
  1856     0399  1283               	bcf	3,5	;RP0=0, select bank0
  1857     039A  1303               	bcf	3,6	;RP1=0, select bank0
  1858     039B  0835               	movf	_M1Step+1,w
  1859     039C  3A80               	xorlw	128
  1860     039D  00A6               	movwf	??_M1Right
  1861     039E  083E               	movf	_PWM_Limit+1,w
  1862     039F  3A80               	xorlw	128
  1863     03A0  0226               	subwf	??_M1Right,w
  1864     03A1  1D03               	skipz
  1865     03A2  2BA5               	goto	u1095
  1866     03A3  083D               	movf	_PWM_Limit,w
  1867     03A4  0234               	subwf	_M1Step,w
  1868     03A5                     u1095:
  1869     03A5  1C03               	btfss	3,0
  1870     03A6  2B8F               	goto	l1458
  1871     03A7  1283               	bcf	3,5	;RP0=0, select bank0
  1872     03A8  1303               	bcf	3,6	;RP1=0, select bank0
  1873     03A9  0835               	movf	_M1Step+1,w
  1874     03AA  3A80               	xorlw	128
  1875     03AB  00A6               	movwf	??_M1Right
  1876     03AC  083E               	movf	_PWM_Limit+1,w
  1877     03AD  3A80               	xorlw	128
  1878     03AE  0226               	subwf	??_M1Right,w
  1879     03AF  1D03               	skipz
  1880     03B0  2BB3               	goto	u1105
  1881     03B1  083D               	movf	_PWM_Limit,w
  1882     03B2  0234               	subwf	_M1Step,w
  1883     03B3                     u1105:
  1884     03B3  1C03               	skipc
  1885     03B4  0008               	return
  1886                           
  1887                           ;PWM.c: 42:             M1Step=0;
  1888     03B5  1283               	bcf	3,5	;RP0=0, select bank0
  1889     03B6  1303               	bcf	3,6	;RP1=0, select bank0
  1890     03B7  01B4               	clrf	_M1Step
  1891     03B8  01B5               	clrf	_M1Step+1
  1892     03B9  0008               	return
  1893     03BA                     l197:	
  1894                           ;PWM.c: 46:     else {PORTBbits.RB0=0;}
  1895                           
  1896     03BA  1283               	bcf	3,5	;RP0=0, select bank0
  1897     03BB  1303               	bcf	3,6	;RP1=0, select bank0
  1898     03BC  1006               	bcf	6,0	;volatile
  1899     03BD  0008               	return
  1900     03BE                     __end_of_M1Right:
  1901                           
  1902                           	psect	text10
  1903     03BE                     __ptext10:	
  1904 ;; *************** function _M1Left *****************
  1905 ;; Defined at:
  1906 ;;		line 4 in file "PWM.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  PWM             2    4[BANK0 ] int 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;		None
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  1    wreg      void 
  1913 ;; Registers used:
  1914 ;;		wreg, status,2, status,0
  1915 ;; Tracked objects:
  1916 ;;		On entry : 300/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1920 ;;      Params:         0       2       0       0
  1921 ;;      Locals:         0       0       0       0
  1922 ;;      Temps:          0       1       0       0
  1923 ;;      Totals:         0       3       0       0
  1924 ;;Total ram usage:        3 bytes
  1925 ;; Hardware stack levels used: 1
  1926 ;; Hardware stack levels required when called: 4
  1927 ;; This function calls:
  1928 ;;		Nothing
  1929 ;; This function is called by:
  1930 ;;		_MoveForward
  1931 ;;		_MoveBackward
  1932 ;;		_MoveLeft
  1933 ;;		_MoveRight
  1934 ;;		_Stop
  1935 ;; This function uses a non-reentrant model
  1936 ;;
  1937                           
  1938     03BE                     _M1Left:	
  1939                           ;psect for function _M1Left
  1940                           
  1941                           
  1942                           ;PWM.c: 6:     if(PWM == 0){PORTBbits.RB3 = 1;}
  1943                           
  1944                           ;incstack = 0
  1945                           ; Regs used in _M1Left: [wreg+status,2+status,0]
  1946     03BE  0824               	movf	M1Left@PWM,w
  1947     03BF  0425               	iorwf	M1Left@PWM+1,w
  1948     03C0  1D03               	btfss	3,2
  1949     03C1  2BC4               	goto	l1470
  1950     03C2  1586               	bsf	6,3	;volatile
  1951     03C3  0008               	return
  1952     03C4                     l1470:
  1953     03C4  0825               	movf	M1Left@PWM+1,w
  1954     03C5  3A80               	xorlw	128
  1955     03C6  00A6               	movwf	??_M1Left
  1956     03C7  083E               	movf	_PWM_Limit+1,w
  1957     03C8  3A80               	xorlw	128
  1958     03C9  0226               	subwf	??_M1Left,w
  1959     03CA  1D03               	skipz
  1960     03CB  2BCE               	goto	u1125
  1961     03CC  083D               	movf	_PWM_Limit,w
  1962     03CD  0224               	subwf	M1Left@PWM,w
  1963     03CE                     u1125:
  1964     03CE  1803               	skipnc
  1965     03CF  2C0D               	goto	l185
  1966                           
  1967                           ;PWM.c: 10:         if(M1Step < PWM){
  1968     03D0  1283               	bcf	3,5	;RP0=0, select bank0
  1969     03D1  1303               	bcf	3,6	;RP1=0, select bank0
  1970     03D2  0835               	movf	_M1Step+1,w
  1971     03D3  3A80               	xorlw	128
  1972     03D4  00A6               	movwf	??_M1Left
  1973     03D5  0825               	movf	M1Left@PWM+1,w
  1974     03D6  3A80               	xorlw	128
  1975     03D7  0226               	subwf	??_M1Left,w
  1976     03D8  1D03               	skipz
  1977     03D9  2BDC               	goto	u1135
  1978     03DA  0824               	movf	M1Left@PWM,w
  1979     03DB  0234               	subwf	_M1Step,w
  1980     03DC                     u1135:
  1981     03DC  1803               	skipnc
  1982     03DD  2BEC               	goto	l1478
  1983                           
  1984                           ;PWM.c: 11:             PORTBbits.RB3 = 0;
  1985     03DE  1283               	bcf	3,5	;RP0=0, select bank0
  1986     03DF  1303               	bcf	3,6	;RP1=0, select bank0
  1987     03E0  1186               	bcf	6,3	;volatile
  1988     03E1  2BE5               	goto	l1476
  1989     03E2                     l1480:
  1990                           
  1991                           ;PWM.c: 15:             PORTBbits.RB3 = 1;
  1992     03E2  1283               	bcf	3,5	;RP0=0, select bank0
  1993     03E3  1303               	bcf	3,6	;RP1=0, select bank0
  1994     03E4  1586               	bsf	6,3	;volatile
  1995     03E5                     l1476:
  1996                           
  1997                           ;PWM.c: 12:             M1Step++;
  1998     03E5  3001               	movlw	1
  1999     03E6  07B4               	addwf	_M1Step,f
  2000     03E7  1803               	skipnc
  2001     03E8  0AB5               	incf	_M1Step+1,f
  2002     03E9  3000               	movlw	0
  2003     03EA  07B5               	addwf	_M1Step+1,f
  2004                           
  2005                           ;PWM.c: 13:         }
  2006     03EB  0008               	return
  2007     03EC                     l1478:
  2008     03EC  1283               	bcf	3,5	;RP0=0, select bank0
  2009     03ED  1303               	bcf	3,6	;RP1=0, select bank0
  2010     03EE  0835               	movf	_M1Step+1,w
  2011     03EF  3A80               	xorlw	128
  2012     03F0  00A6               	movwf	??_M1Left
  2013     03F1  083E               	movf	_PWM_Limit+1,w
  2014     03F2  3A80               	xorlw	128
  2015     03F3  0226               	subwf	??_M1Left,w
  2016     03F4  1D03               	skipz
  2017     03F5  2BF8               	goto	u1145
  2018     03F6  083D               	movf	_PWM_Limit,w
  2019     03F7  0234               	subwf	_M1Step,w
  2020     03F8                     u1145:
  2021     03F8  1C03               	btfss	3,0
  2022     03F9  2BE2               	goto	l1480
  2023     03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2024     03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2025     03FC  0835               	movf	_M1Step+1,w
  2026     03FD  3A80               	xorlw	128
  2027     03FE  00A6               	movwf	??_M1Left
  2028     03FF  083E               	movf	_PWM_Limit+1,w
  2029     0400  3A80               	xorlw	128
  2030     0401  0226               	subwf	??_M1Left,w
  2031     0402  1D03               	skipz
  2032     0403  2C06               	goto	u1155
  2033     0404  083D               	movf	_PWM_Limit,w
  2034     0405  0234               	subwf	_M1Step,w
  2035     0406                     u1155:
  2036     0406  1C03               	skipc
  2037     0407  0008               	return
  2038                           
  2039                           ;PWM.c: 19:             M1Step=0;
  2040     0408  1283               	bcf	3,5	;RP0=0, select bank0
  2041     0409  1303               	bcf	3,6	;RP1=0, select bank0
  2042     040A  01B4               	clrf	_M1Step
  2043     040B  01B5               	clrf	_M1Step+1
  2044     040C  0008               	return
  2045     040D                     l185:	
  2046                           ;PWM.c: 23:     else {PORTBbits.RB3=0;}
  2047                           
  2048     040D  1283               	bcf	3,5	;RP0=0, select bank0
  2049     040E  1303               	bcf	3,6	;RP1=0, select bank0
  2050     040F  1186               	bcf	6,3	;volatile
  2051     0410  0008               	return
  2052     0411                     __end_of_M1Left:
  2053                           
  2054                           	psect	text11
  2055     04F1                     __ptext11:	
  2056 ;; *************** function _Delay_Seg *****************
  2057 ;; Defined at:
  2058 ;;		line 17 in file "MyDelays.c"
  2059 ;; Parameters:    Size  Location     Type
  2060 ;;  j               2   10[BANK0 ] unsigned int 
  2061 ;; Auto vars:     Size  Location     Type
  2062 ;;  i               2   14[BANK0 ] int 
  2063 ;; Return value:  Size  Location     Type
  2064 ;;                  1    wreg      void 
  2065 ;; Registers used:
  2066 ;;		wreg, status,2, status,0, pclath, cstack
  2067 ;; Tracked objects:
  2068 ;;		On entry : 300/0
  2069 ;;		On exit  : 300/0
  2070 ;;		Unchanged: 0/0
  2071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2072 ;;      Params:         0       2       0       0
  2073 ;;      Locals:         0       2       0       0
  2074 ;;      Temps:          0       2       0       0
  2075 ;;      Totals:         0       6       0       0
  2076 ;;Total ram usage:        6 bytes
  2077 ;; Hardware stack levels used: 1
  2078 ;; Hardware stack levels required when called: 5
  2079 ;; This function calls:
  2080 ;;		___wmul
  2081 ;; This function is called by:
  2082 ;;		_RobotControl
  2083 ;; This function uses a non-reentrant model
  2084 ;;
  2085                           
  2086     04F1                     _Delay_Seg:	
  2087                           ;psect for function _Delay_Seg
  2088                           
  2089                           
  2090                           ;MyDelays.c: 19:     int i;;MyDelays.c: 21:     j=j*100;
  2091                           
  2092                           ;incstack = 0
  2093                           ; Regs used in _Delay_Seg: [wreg+status,2+status,0+pclath+cstack]
  2094     04F1  082B               	movf	Delay_Seg@j+1,w
  2095     04F2  00A5               	movwf	___wmul@multiplier+1
  2096     04F3  082A               	movf	Delay_Seg@j,w
  2097     04F4  00A4               	movwf	___wmul@multiplier
  2098     04F5  3064               	movlw	100
  2099     04F6  00A6               	movwf	___wmul@multiplicand
  2100     04F7  3000               	movlw	0
  2101     04F8  00A7               	movwf	___wmul@multiplicand+1
  2102     04F9  258E               	fcall	___wmul
  2103     04FA  0825               	movf	?___wmul+1,w
  2104     04FB  00AB               	movwf	Delay_Seg@j+1
  2105     04FC  0824               	movf	?___wmul,w
  2106     04FD  00AA               	movwf	Delay_Seg@j
  2107                           
  2108                           ;MyDelays.c: 23:     for(i=0;i<j;i++){
  2109     04FE  01AE               	clrf	Delay_Seg@i
  2110     04FF  01AF               	clrf	Delay_Seg@i+1
  2111     0500                     l161:
  2112     0500  082B               	movf	Delay_Seg@j+1,w
  2113     0501  022F               	subwf	Delay_Seg@i+1,w
  2114     0502  1D03               	skipz
  2115     0503  2D06               	goto	u1535
  2116     0504  082A               	movf	Delay_Seg@j,w
  2117     0505  022E               	subwf	Delay_Seg@i,w
  2118     0506                     u1535:
  2119     0506  1803               	btfsc	3,0
  2120     0507  0008               	return
  2121                           
  2122                           ;MyDelays.c: 25:         _delay((unsigned long)((10)*(8000000/4000.0)));
  2123     0508  301A               	movlw	26
  2124     0509  1283               	bcf	3,5	;RP0=0, select bank0
  2125     050A  1303               	bcf	3,6	;RP1=0, select bank0
  2126     050B  00AD               	movwf	??_Delay_Seg+1
  2127     050C  30F8               	movlw	248
  2128     050D  00AC               	movwf	??_Delay_Seg
  2129     050E                     u2037:
  2130     050E  0BAC               	decfsz	??_Delay_Seg,f
  2131     050F  2D0E               	goto	u2037
  2132     0510  0BAD               	decfsz	??_Delay_Seg+1,f
  2133     0511  2D0E               	goto	u2037
  2134                           
  2135                           ;MyDelays.c: 27:     }
  2136     0512  3001               	movlw	1
  2137     0513  1283               	bcf	3,5	;RP0=0, select bank0
  2138     0514  1303               	bcf	3,6	;RP1=0, select bank0
  2139     0515  07AE               	addwf	Delay_Seg@i,f
  2140     0516  1803               	skipnc
  2141     0517  0AAF               	incf	Delay_Seg@i+1,f
  2142     0518  3000               	movlw	0
  2143     0519  07AF               	addwf	Delay_Seg@i+1,f
  2144     051A  2D00               	goto	l161
  2145     051B                     __end_of_Delay_Seg:
  2146                           
  2147                           	psect	text12
  2148     04C5                     __ptext12:	
  2149 ;; *************** function _GeneralConfig *****************
  2150 ;; Defined at:
  2151 ;;		line 77 in file "DBot_Main.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;		None
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2160 ;; Tracked objects:
  2161 ;;		On entry : B00/0
  2162 ;;		On exit  : 300/100
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2165 ;;      Params:         0       0       0       0
  2166 ;;      Locals:         0       0       0       0
  2167 ;;      Temps:          0       0       0       0
  2168 ;;      Totals:         0       0       0       0
  2169 ;;Total ram usage:        0 bytes
  2170 ;; Hardware stack levels used: 1
  2171 ;; Hardware stack levels required when called: 7
  2172 ;; This function calls:
  2173 ;;		_Delay_HalfSeg
  2174 ;;		_HC06Config
  2175 ;;		_USARTConfig
  2176 ;; This function is called by:
  2177 ;;		_main
  2178 ;; This function uses a non-reentrant model
  2179 ;;
  2180                           
  2181     04C5                     _GeneralConfig:	
  2182                           ;psect for function _GeneralConfig
  2183                           
  2184                           
  2185                           ;DBot_Main.c: 80:     OSCF = 1;
  2186                           
  2187                           ;incstack = 0
  2188                           ; Regs used in _GeneralConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2189     04C5  1683               	bsf	3,5	;RP0=1, select bank1
  2190     04C6  158E               	bsf	14,3	;volatile
  2191                           
  2192                           ;DBot_Main.c: 84:     CMCON = 0b00000111;
  2193     04C7  3007               	movlw	7
  2194     04C8  1283               	bcf	3,5	;RP0=0, select bank0
  2195     04C9  009F               	movwf	31	;volatile
  2196                           
  2197                           ;DBot_Main.c: 87:     TRISAbits.TRISA0 = 1;
  2198     04CA  1683               	bsf	3,5	;RP0=1, select bank1
  2199     04CB  1405               	bsf	5,0	;volatile
  2200                           
  2201                           ;DBot_Main.c: 88:     TRISAbits.TRISA7 = 1;
  2202     04CC  1785               	bsf	5,7	;volatile
  2203                           
  2204                           ;DBot_Main.c: 90:     TRISBbits.TRISB3 = 0;
  2205     04CD  1186               	bcf	6,3	;volatile
  2206                           
  2207                           ;DBot_Main.c: 91:     TRISBbits.TRISB0 = 0;
  2208     04CE  1006               	bcf	6,0	;volatile
  2209                           
  2210                           ;DBot_Main.c: 92:     TRISAbits.TRISA2 = 0;
  2211     04CF  1105               	bcf	5,2	;volatile
  2212                           
  2213                           ;DBot_Main.c: 93:     TRISAbits.TRISA3 = 0;
  2214     04D0  1185               	bcf	5,3	;volatile
  2215                           
  2216                           ;DBot_Main.c: 94:     PORTBbits.RB3 = 1;
  2217     04D1  1283               	bcf	3,5	;RP0=0, select bank0
  2218     04D2  1586               	bsf	6,3	;volatile
  2219                           
  2220                           ;DBot_Main.c: 95:     PORTBbits.RB0 = 1;
  2221     04D3  1406               	bsf	6,0	;volatile
  2222                           
  2223                           ;DBot_Main.c: 96:     PORTAbits.RA3 = 1;
  2224     04D4  1585               	bsf	5,3	;volatile
  2225                           
  2226                           ;DBot_Main.c: 97:     PORTAbits.RA2 = 1;
  2227     04D5  1505               	bsf	5,2	;volatile
  2228                           
  2229                           ;DBot_Main.c: 99:     TRISBbits.TRISB5 = 1;
  2230     04D6  1683               	bsf	3,5	;RP0=1, select bank1
  2231     04D7  1686               	bsf	6,5	;volatile
  2232                           
  2233                           ;DBot_Main.c: 100:     TRISBbits.TRISB4 = 1;
  2234     04D8  1606               	bsf	6,4	;volatile
  2235                           
  2236                           ;DBot_Main.c: 103:     USARTConfig();
  2237     04D9  2706               	fcall	_USARTConfig
  2238                           
  2239                           ;DBot_Main.c: 106:     Delay_HalfSeg(1);
  2240     04DA  3001               	movlw	1
  2241     04DB  00AA               	movwf	Delay_HalfSeg@j
  2242     04DC  3000               	movlw	0
  2243     04DD  00AB               	movwf	Delay_HalfSeg@j+1
  2244     04DE  251B               	fcall	_Delay_HalfSeg
  2245                           
  2246                           ;DBot_Main.c: 107:     HC06Config();
  2247     04DF  248F               	fcall	_HC06Config
  2248                           
  2249                           ;DBot_Main.c: 109:     PIE1bits.RCIE = 1;
  2250     04E0  1683               	bsf	3,5	;RP0=1, select bank1
  2251     04E1  1303               	bcf	3,6	;RP1=0, select bank1
  2252     04E2  168C               	bsf	12,5	;volatile
  2253                           
  2254                           ;DBot_Main.c: 112:     TMR1 = 255254;
  2255     04E3  30E5               	movlw	229
  2256     04E4  1283               	bcf	3,5	;RP0=0, select bank0
  2257     04E5  008F               	movwf	15	;volatile
  2258     04E6  3016               	movlw	22
  2259     04E7  008E               	movwf	14	;volatile
  2260                           
  2261                           ;DBot_Main.c: 113:     T1CON = 0b01000001;
  2262     04E8  3041               	movlw	65
  2263     04E9  0090               	movwf	16	;volatile
  2264                           
  2265                           ;DBot_Main.c: 114:     PIE1bits.TMR1IE = 1;
  2266     04EA  1683               	bsf	3,5	;RP0=1, select bank1
  2267     04EB  140C               	bsf	12,0	;volatile
  2268                           
  2269                           ;DBot_Main.c: 115:     INTCONbits.INTE = 1;
  2270     04EC  160B               	bsf	11,4	;volatile
  2271                           
  2272                           ;DBot_Main.c: 116:     OPTION_REGbits.INTEDG = 1;
  2273     04ED  1701               	bsf	1,6	;volatile
  2274                           
  2275                           ;DBot_Main.c: 117:     INTCONbits.PEIE = 1;
  2276     04EE  170B               	bsf	11,6	;volatile
  2277                           
  2278                           ;DBot_Main.c: 118:     INTCONbits.GIE = 1;
  2279     04EF  178B               	bsf	11,7	;volatile
  2280     04F0  0008               	return
  2281     04F1                     __end_of_GeneralConfig:
  2282                           
  2283                           	psect	text13
  2284     0706                     __ptext13:	
  2285 ;; *************** function _USARTConfig *****************
  2286 ;; Defined at:
  2287 ;;		line 8 in file "USART.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;		None
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;		None
  2292 ;; Return value:  Size  Location     Type
  2293 ;;                  1    wreg      void 
  2294 ;; Registers used:
  2295 ;;		wreg
  2296 ;; Tracked objects:
  2297 ;;		On entry : B00/100
  2298 ;;		On exit  : B00/0
  2299 ;;		Unchanged: 800/0
  2300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2301 ;;      Params:         0       0       0       0
  2302 ;;      Locals:         0       0       0       0
  2303 ;;      Temps:          0       0       0       0
  2304 ;;      Totals:         0       0       0       0
  2305 ;;Total ram usage:        0 bytes
  2306 ;; Hardware stack levels used: 1
  2307 ;; Hardware stack levels required when called: 4
  2308 ;; This function calls:
  2309 ;;		Nothing
  2310 ;; This function is called by:
  2311 ;;		_GeneralConfig
  2312 ;; This function uses a non-reentrant model
  2313 ;;
  2314                           
  2315     0706                     _USARTConfig:	
  2316                           ;psect for function _USARTConfig
  2317                           
  2318                           
  2319                           ;USART.c: 12:     SPBRG = 32;
  2320                           
  2321                           ;incstack = 0
  2322                           ; Regs used in _USARTConfig: [wreg]
  2323     0706  3020               	movlw	32
  2324     0707  0099               	movwf	25	;volatile
  2325                           
  2326                           ;USART.c: 13:     TXSTA = 0b00100010;
  2327     0708  3022               	movlw	34
  2328     0709  0098               	movwf	24	;volatile
  2329                           
  2330                           ;USART.c: 14:     RCSTA = 0b10010110;
  2331     070A  3096               	movlw	150
  2332     070B  1283               	bcf	3,5	;RP0=0, select bank0
  2333     070C  0098               	movwf	24	;volatile
  2334     070D  0008               	return
  2335     070E                     __end_of_USARTConfig:
  2336                           
  2337                           	psect	text14
  2338     048F                     __ptext14:	
  2339 ;; *************** function _HC06Config *****************
  2340 ;; Defined at:
  2341 ;;		line 52 in file "USART.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;		None
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;		None
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 300/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2355 ;;      Params:         0       0       0       0
  2356 ;;      Locals:         0       0       0       0
  2357 ;;      Temps:          0       0       0       0
  2358 ;;      Totals:         0       0       0       0
  2359 ;;Total ram usage:        0 bytes
  2360 ;; Hardware stack levels used: 1
  2361 ;; Hardware stack levels required when called: 6
  2362 ;; This function calls:
  2363 ;;		_Delay_HalfSeg
  2364 ;;		_USARTWrite
  2365 ;; This function is called by:
  2366 ;;		_GeneralConfig
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370     048F                     _HC06Config:	
  2371                           ;psect for function _HC06Config
  2372                           
  2373     048F                     l283:	
  2374                           ;USART.c: 55:     while(!TXSTAbits.TRMT);
  2375                           
  2376                           ;incstack = 0
  2377                           ; Regs used in _HC06Config: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2378                           
  2379     048F  1683               	bsf	3,5	;RP0=1, select bank1
  2380     0490  1C98               	btfss	24,1	;volatile
  2381     0491  2C8F               	goto	l283
  2382                           
  2383                           ;USART.c: 56:     USARTWrite("AT+ROLE=S",9);
  2384     0492  3009               	movlw	9
  2385     0493  1283               	bcf	3,5	;RP0=0, select bank0
  2386     0494  00A4               	movwf	USARTWrite@length
  2387     0495  3000               	movlw	0
  2388     0496  00A5               	movwf	USARTWrite@length+1
  2389     0497  3025               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2390     0498  256C               	fcall	_USARTWrite
  2391     0499                     l286:	
  2392                           ;USART.c: 57:     while(!TXSTAbits.TRMT);
  2393                           
  2394     0499  1683               	bsf	3,5	;RP0=1, select bank1
  2395     049A  1303               	bcf	3,6	;RP1=0, select bank1
  2396     049B  1C98               	btfss	24,1	;volatile
  2397     049C  2C99               	goto	l286
  2398                           
  2399                           ;USART.c: 58:     Delay_HalfSeg(1);
  2400     049D  3001               	movlw	1
  2401     049E  1283               	bcf	3,5	;RP0=0, select bank0
  2402     049F  00AA               	movwf	Delay_HalfSeg@j
  2403     04A0  3000               	movlw	0
  2404     04A1  00AB               	movwf	Delay_HalfSeg@j+1
  2405     04A2  251B               	fcall	_Delay_HalfSeg
  2406                           
  2407                           ;USART.c: 59:     USARTWrite("AT+MODE=0",9);
  2408     04A3  3009               	movlw	9
  2409     04A4  00A4               	movwf	USARTWrite@length
  2410     04A5  3000               	movlw	0
  2411     04A6  00A5               	movwf	USARTWrite@length+1
  2412     04A7  301B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  2413     04A8  256C               	fcall	_USARTWrite
  2414     04A9                     l289:	
  2415                           ;USART.c: 60:     while(!TXSTAbits.TRMT);
  2416                           
  2417     04A9  1683               	bsf	3,5	;RP0=1, select bank1
  2418     04AA  1303               	bcf	3,6	;RP1=0, select bank1
  2419     04AB  1C98               	btfss	24,1	;volatile
  2420     04AC  2CA9               	goto	l289
  2421                           
  2422                           ;USART.c: 61:     USARTWrite("AT+NAMEDeskBot",14);
  2423     04AD  300E               	movlw	14
  2424     04AE  1283               	bcf	3,5	;RP0=0, select bank0
  2425     04AF  00A4               	movwf	USARTWrite@length
  2426     04B0  3000               	movlw	0
  2427     04B1  00A5               	movwf	USARTWrite@length+1
  2428     04B2  3001               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2429     04B3  256C               	fcall	_USARTWrite
  2430     04B4                     l292:	
  2431                           ;USART.c: 62:     while(!TXSTAbits.TRMT);
  2432                           
  2433     04B4  1683               	bsf	3,5	;RP0=1, select bank1
  2434     04B5  1303               	bcf	3,6	;RP1=0, select bank1
  2435     04B6  1C98               	btfss	24,1	;volatile
  2436     04B7  2CB4               	goto	l292
  2437                           
  2438                           ;USART.c: 63:     Delay_HalfSeg(1);
  2439     04B8  3001               	movlw	1
  2440     04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2441     04BA  00AA               	movwf	Delay_HalfSeg@j
  2442     04BB  3000               	movlw	0
  2443     04BC  00AB               	movwf	Delay_HalfSeg@j+1
  2444     04BD  251B               	fcall	_Delay_HalfSeg
  2445                           
  2446                           ;USART.c: 64:     USARTWrite("AT+PIN1234",10);
  2447     04BE  300A               	movlw	10
  2448     04BF  00A4               	movwf	USARTWrite@length
  2449     04C0  3000               	movlw	0
  2450     04C1  00A5               	movwf	USARTWrite@length+1
  2451     04C2  3010               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  2452     04C3  256C               	fcall	_USARTWrite
  2453     04C4  0008               	return
  2454     04C5                     __end_of_HC06Config:
  2455                           
  2456                           	psect	text15
  2457     056C                     __ptext15:	
  2458 ;; *************** function _USARTWrite *****************
  2459 ;; Defined at:
  2460 ;;		line 18 in file "USART.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;  text            1    wreg     PTR unsigned char 
  2463 ;;		 -> STR_4(11), STR_3(15), STR_2(10), STR_1(10), 
  2464 ;;  length          2    4[BANK0 ] int 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;  text            1    9[BANK0 ] PTR unsigned char 
  2467 ;;		 -> STR_4(11), STR_3(15), STR_2(10), STR_1(10), 
  2468 ;;  i               2    7[BANK0 ] int 
  2469 ;; Return value:  Size  Location     Type
  2470 ;;                  1    wreg      void 
  2471 ;; Registers used:
  2472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2473 ;; Tracked objects:
  2474 ;;		On entry : 300/0
  2475 ;;		On exit  : 0/0
  2476 ;;		Unchanged: 0/0
  2477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2478 ;;      Params:         0       2       0       0
  2479 ;;      Locals:         0       3       0       0
  2480 ;;      Temps:          0       1       0       0
  2481 ;;      Totals:         0       6       0       0
  2482 ;;Total ram usage:        6 bytes
  2483 ;; Hardware stack levels used: 1
  2484 ;; Hardware stack levels required when called: 4
  2485 ;; This function calls:
  2486 ;;		Nothing
  2487 ;; This function is called by:
  2488 ;;		_HC06Config
  2489 ;; This function uses a non-reentrant model
  2490 ;;
  2491                           
  2492     056C                     _USARTWrite:	
  2493                           ;psect for function _USARTWrite
  2494                           
  2495                           
  2496                           ;incstack = 0
  2497                           ; Regs used in _USARTWrite: [wreg-fsr0h+status,2+status,0+pclath]
  2498                           ;USARTWrite@text stored from wreg
  2499     056C  00A9               	movwf	USARTWrite@text
  2500                           
  2501                           ;USART.c: 20:     int i=0;
  2502     056D  01A7               	clrf	USARTWrite@i
  2503     056E  01A8               	clrf	USARTWrite@i+1
  2504                           
  2505                           ;USART.c: 22:     for(i=0;i<length;i++){
  2506     056F  01A7               	clrf	USARTWrite@i
  2507     0570  01A8               	clrf	USARTWrite@i+1
  2508     0571                     l1544:
  2509     0571  0828               	movf	USARTWrite@i+1,w
  2510     0572  3A80               	xorlw	128
  2511     0573  00A6               	movwf	??_USARTWrite
  2512     0574  0825               	movf	USARTWrite@length+1,w
  2513     0575  3A80               	xorlw	128
  2514     0576  0226               	subwf	??_USARTWrite,w
  2515     0577  1D03               	skipz
  2516     0578  2D7B               	goto	u1285
  2517     0579  0824               	movf	USARTWrite@length,w
  2518     057A  0227               	subwf	USARTWrite@i,w
  2519     057B                     u1285:
  2520     057B  1803               	btfsc	3,0
  2521     057C  0008               	return
  2522     057D                     l268:
  2523     057D  1683               	bsf	3,5	;RP0=1, select bank1
  2524     057E  1303               	bcf	3,6	;RP1=0, select bank1
  2525     057F  1C98               	btfss	24,1	;volatile
  2526     0580  2D7D               	goto	l268
  2527                           
  2528                           ;USART.c: 25:         TXREG = text[i];
  2529     0581  1283               	bcf	3,5	;RP0=0, select bank0
  2530     0582  0827               	movf	USARTWrite@i,w
  2531     0583  0729               	addwf	USARTWrite@text,w
  2532     0584  0084               	movwf	4
  2533     0585  2411               	fcall	stringdir
  2534     0586  0099               	movwf	25	;volatile
  2535                           
  2536                           ;USART.c: 26:     }
  2537     0587  3001               	movlw	1
  2538     0588  07A7               	addwf	USARTWrite@i,f
  2539     0589  1803               	skipnc
  2540     058A  0AA8               	incf	USARTWrite@i+1,f
  2541     058B  3000               	movlw	0
  2542     058C  07A8               	addwf	USARTWrite@i+1,f
  2543     058D  2D71               	goto	l1544
  2544     058E                     __end_of_USARTWrite:
  2545                           
  2546                           	psect	text16
  2547     051B                     __ptext16:	
  2548 ;; *************** function _Delay_HalfSeg *****************
  2549 ;; Defined at:
  2550 ;;		line 4 in file "MyDelays.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  j               2   10[BANK0 ] unsigned int 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  i               2   14[BANK0 ] int 
  2555 ;; Return value:  Size  Location     Type
  2556 ;;                  1    wreg      void 
  2557 ;; Registers used:
  2558 ;;		wreg, status,2, status,0, pclath, cstack
  2559 ;; Tracked objects:
  2560 ;;		On entry : 300/0
  2561 ;;		On exit  : 300/0
  2562 ;;		Unchanged: 0/0
  2563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2564 ;;      Params:         0       2       0       0
  2565 ;;      Locals:         0       2       0       0
  2566 ;;      Temps:          0       2       0       0
  2567 ;;      Totals:         0       6       0       0
  2568 ;;Total ram usage:        6 bytes
  2569 ;; Hardware stack levels used: 1
  2570 ;; Hardware stack levels required when called: 5
  2571 ;; This function calls:
  2572 ;;		___wmul
  2573 ;; This function is called by:
  2574 ;;		_GeneralConfig
  2575 ;;		_HC06Config
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578                           
  2579     051B                     _Delay_HalfSeg:	
  2580                           ;psect for function _Delay_HalfSeg
  2581                           
  2582                           
  2583                           ;MyDelays.c: 6:     int i;;MyDelays.c: 8:     j=j*50;
  2584                           
  2585                           ;incstack = 0
  2586                           ; Regs used in _Delay_HalfSeg: [wreg+status,2+status,0+pclath+cstack]
  2587     051B  082B               	movf	Delay_HalfSeg@j+1,w
  2588     051C  00A5               	movwf	___wmul@multiplier+1
  2589     051D  082A               	movf	Delay_HalfSeg@j,w
  2590     051E  00A4               	movwf	___wmul@multiplier
  2591     051F  3032               	movlw	50
  2592     0520  00A6               	movwf	___wmul@multiplicand
  2593     0521  3000               	movlw	0
  2594     0522  00A7               	movwf	___wmul@multiplicand+1
  2595     0523  258E               	fcall	___wmul
  2596     0524  0825               	movf	?___wmul+1,w
  2597     0525  00AB               	movwf	Delay_HalfSeg@j+1
  2598     0526  0824               	movf	?___wmul,w
  2599     0527  00AA               	movwf	Delay_HalfSeg@j
  2600                           
  2601                           ;MyDelays.c: 10:     for(i=0;i<j;i++){
  2602     0528  01AE               	clrf	Delay_HalfSeg@i
  2603     0529  01AF               	clrf	Delay_HalfSeg@i+1
  2604     052A                     l155:
  2605     052A  082B               	movf	Delay_HalfSeg@j+1,w
  2606     052B  022F               	subwf	Delay_HalfSeg@i+1,w
  2607     052C  1D03               	skipz
  2608     052D  2D30               	goto	u1265
  2609     052E  082A               	movf	Delay_HalfSeg@j,w
  2610     052F  022E               	subwf	Delay_HalfSeg@i,w
  2611     0530                     u1265:
  2612     0530  1803               	btfsc	3,0
  2613     0531  0008               	return
  2614                           
  2615                           ;MyDelays.c: 12:         _delay((unsigned long)((10)*(8000000/4000.0)));
  2616     0532  301A               	movlw	26
  2617     0533  1283               	bcf	3,5	;RP0=0, select bank0
  2618     0534  1303               	bcf	3,6	;RP1=0, select bank0
  2619     0535  00AD               	movwf	??_Delay_HalfSeg+1
  2620     0536  30F8               	movlw	248
  2621     0537  00AC               	movwf	??_Delay_HalfSeg
  2622     0538                     u2047:
  2623     0538  0BAC               	decfsz	??_Delay_HalfSeg,f
  2624     0539  2D38               	goto	u2047
  2625     053A  0BAD               	decfsz	??_Delay_HalfSeg+1,f
  2626     053B  2D38               	goto	u2047
  2627                           
  2628                           ;MyDelays.c: 14:     }
  2629     053C  3001               	movlw	1
  2630     053D  1283               	bcf	3,5	;RP0=0, select bank0
  2631     053E  1303               	bcf	3,6	;RP1=0, select bank0
  2632     053F  07AE               	addwf	Delay_HalfSeg@i,f
  2633     0540  1803               	skipnc
  2634     0541  0AAF               	incf	Delay_HalfSeg@i+1,f
  2635     0542  3000               	movlw	0
  2636     0543  07AF               	addwf	Delay_HalfSeg@i+1,f
  2637     0544  2D2A               	goto	l155
  2638     0545                     __end_of_Delay_HalfSeg:
  2639                           
  2640                           	psect	text17
  2641     058E                     __ptext17:	
  2642 ;; *************** function ___wmul *****************
  2643 ;; Defined at:
  2644 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  2645 ;; Parameters:    Size  Location     Type
  2646 ;;  multiplier      2    4[BANK0 ] unsigned int 
  2647 ;;  multiplicand    2    6[BANK0 ] unsigned int 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  product         2    8[BANK0 ] unsigned int 
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  2    4[BANK0 ] unsigned int 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2, status,0
  2654 ;; Tracked objects:
  2655 ;;		On entry : 300/0
  2656 ;;		On exit  : 300/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2659 ;;      Params:         0       4       0       0
  2660 ;;      Locals:         0       2       0       0
  2661 ;;      Temps:          0       0       0       0
  2662 ;;      Totals:         0       6       0       0
  2663 ;;Total ram usage:        6 bytes
  2664 ;; Hardware stack levels used: 1
  2665 ;; Hardware stack levels required when called: 4
  2666 ;; This function calls:
  2667 ;;		Nothing
  2668 ;; This function is called by:
  2669 ;;		_Delay_HalfSeg
  2670 ;;		_Delay_Seg
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674     058E                     ___wmul:	
  2675                           ;psect for function ___wmul
  2676                           
  2677                           
  2678                           ;incstack = 0
  2679                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2680     058E  01A8               	clrf	___wmul@product
  2681     058F  01A9               	clrf	___wmul@product+1
  2682     0590                     l1432:
  2683     0590  1C24               	btfss	___wmul@multiplier,0
  2684     0591  2D98               	goto	l406
  2685     0592  0826               	movf	___wmul@multiplicand,w
  2686     0593  07A8               	addwf	___wmul@product,f
  2687     0594  1803               	skipnc
  2688     0595  0AA9               	incf	___wmul@product+1,f
  2689     0596  0827               	movf	___wmul@multiplicand+1,w
  2690     0597  07A9               	addwf	___wmul@product+1,f
  2691     0598                     l406:
  2692     0598  3001               	movlw	1
  2693     0599                     u1035:
  2694     0599  1003               	clrc
  2695     059A  0DA6               	rlf	___wmul@multiplicand,f
  2696     059B  0DA7               	rlf	___wmul@multiplicand+1,f
  2697     059C  3EFF               	addlw	-1
  2698     059D  1D03               	skipz
  2699     059E  2D99               	goto	u1035
  2700     059F  3001               	movlw	1
  2701     05A0                     u1045:
  2702     05A0  1003               	clrc
  2703     05A1  0CA5               	rrf	___wmul@multiplier+1,f
  2704     05A2  0CA4               	rrf	___wmul@multiplier,f
  2705     05A3  3EFF               	addlw	-1
  2706     05A4  1D03               	skipz
  2707     05A5  2DA0               	goto	u1045
  2708     05A6  0824               	movf	___wmul@multiplier,w
  2709     05A7  0425               	iorwf	___wmul@multiplier+1,w
  2710     05A8  1D03               	btfss	3,2
  2711     05A9  2D90               	goto	l1432
  2712     05AA  0829               	movf	___wmul@product+1,w
  2713     05AB  00A5               	movwf	?___wmul+1
  2714     05AC  0828               	movf	___wmul@product,w
  2715     05AD  00A4               	movwf	?___wmul
  2716     05AE  0008               	return
  2717     05AF                     __end_of___wmul:
  2718                           
  2719                           	psect	text18
  2720     05F1                     __ptext18:	
  2721 ;; *************** function _GeneralInterrupt *****************
  2722 ;; Defined at:
  2723 ;;		line 126 in file "DBot_Main.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 300/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2737 ;;      Params:         0       0       0       0
  2738 ;;      Locals:         0       0       0       0
  2739 ;;      Temps:          0       4       0       0
  2740 ;;      Totals:         0       4       0       0
  2741 ;;Total ram usage:        4 bytes
  2742 ;; Hardware stack levels used: 1
  2743 ;; Hardware stack levels required when called: 3
  2744 ;; This function calls:
  2745 ;;		_ReceiveControl
  2746 ;;		_USARTRead
  2747 ;;		i1_RobotControl
  2748 ;; This function is called by:
  2749 ;;		Interrupt level 1
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753     05F1                     _GeneralInterrupt:	
  2754                           ;psect for function _GeneralInterrupt
  2755                           
  2756                           
  2757                           ;DBot_Main.c: 128:     if(PIR1bits.RCIF == 1){
  2758     05F1  1E8C               	btfss	12,5	;volatile
  2759     05F2  2DFB               	goto	i1l1940
  2760                           
  2761                           ;DBot_Main.c: 130:         Data_Length = USARTRead(HC06_Data);
  2762     05F3  303A               	movlw	(low (_HC06_Data| 0))& (0+255)
  2763     05F4  25D0               	fcall	_USARTRead
  2764     05F5  0871               	movf	?_USARTRead+1,w
  2765     05F6  00FD               	movwf	_Data_Length+1
  2766     05F7  0870               	movf	?_USARTRead,w
  2767     05F8  00FC               	movwf	_Data_Length
  2768                           
  2769                           ;DBot_Main.c: 131:         ReceiveControl(HC06_Data);
  2770     05F9  303A               	movlw	(low (_HC06_Data| 0))& (0+255)
  2771     05FA  2022               	fcall	_ReceiveControl
  2772     05FB                     i1l1940:
  2773                           
  2774                           ;DBot_Main.c: 135:     if(PIR1bits.TMR1IF == 1){
  2775     05FB  1283               	bcf	3,5	;RP0=0, select bank0
  2776     05FC  1303               	bcf	3,6	;RP1=0, select bank0
  2777     05FD  1C0C               	btfss	12,0	;volatile
  2778     05FE  2E03               	goto	i1l150
  2779                           
  2780                           ;DBot_Main.c: 137:       RobotControl();
  2781     05FF  210A               	fcall	i1_RobotControl
  2782                           
  2783                           ;DBot_Main.c: 138:       PIR1bits.TMR1IF = 0;
  2784     0600  1283               	bcf	3,5	;RP0=0, select bank0
  2785     0601  1303               	bcf	3,6	;RP1=0, select bank0
  2786     0602  100C               	bcf	12,0	;volatile
  2787     0603                     i1l150:	
  2788                           ;DBot_Main.c: 142:     if(INTF == 1){
  2789                           
  2790     0603  0823               	movf	??_GeneralInterrupt+3,w
  2791     0604  00FF               	movwf	127
  2792     0605  0822               	movf	??_GeneralInterrupt+2,w
  2793     0606  008A               	movwf	10
  2794     0607  0821               	movf	??_GeneralInterrupt+1,w
  2795     0608  0084               	movwf	4
  2796     0609  0E20               	swapf	??_GeneralInterrupt,w
  2797     060A  0083               	movwf	3
  2798     060B  0EFE               	swapf	126,f
  2799     060C  0E7E               	swapf	126,w
  2800     060D  0009               	retfie
  2801     060E                     __end_of_GeneralInterrupt:
  2802                           
  2803                           	psect	intentry
  2804     0004                     __pintentry:	
  2805                           ;incstack = 0
  2806                           ; Regs used in _GeneralInterrupt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2807                           
  2808     0004                     interrupt_function:
  2809     007E                     saved_w	set	btemp
  2810     0004  00FE               	movwf	btemp
  2811     0005  0E03               	swapf	3,w
  2812     0006  1283               	bcf	3,5	;RP0=0, select bank0
  2813     0007  1303               	bcf	3,6	;RP1=0, select bank0
  2814     0008  00A0               	movwf	??_GeneralInterrupt
  2815     0009  0804               	movf	4,w
  2816     000A  00A1               	movwf	??_GeneralInterrupt+1
  2817     000B  080A               	movf	10,w
  2818     000C  00A2               	movwf	??_GeneralInterrupt+2
  2819     000D  087F               	movf	btemp+1,w
  2820     000E  00A3               	movwf	??_GeneralInterrupt+3
  2821     000F  2DF1               	ljmp	_GeneralInterrupt
  2822                           
  2823                           	psect	text19
  2824     010A                     __ptext19:	
  2825 ;; *************** function i1_RobotControl *****************
  2826 ;; Defined at:
  2827 ;;		line 42 in file "Control.c"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 300/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2841 ;;      Params:         0       0       0       0
  2842 ;;      Locals:         0       0       0       0
  2843 ;;      Temps:          0       0       0       0
  2844 ;;      Totals:         0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used: 1
  2847 ;; Hardware stack levels required when called: 2
  2848 ;; This function calls:
  2849 ;;		i1_Delay_Seg
  2850 ;;		i1_MoveBackward
  2851 ;;		i1_MoveForward
  2852 ;;		i1_MoveLeft
  2853 ;;		i1_MoveRight
  2854 ;;		i1_Stop
  2855 ;; This function is called by:
  2856 ;;		_GeneralInterrupt
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860     010A                     i1_RobotControl:	
  2861                           ;psect for function i1_RobotControl
  2862                           
  2863                           
  2864                           ;Control.c: 45:     if(ManualMode == 1){
  2865                           
  2866                           ;incstack = 0
  2867                           ; Regs used in i1_RobotControl: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2868     010A  0338               	decf	_ManualMode,w
  2869     010B  0439               	iorwf	_ManualMode+1,w
  2870     010C  1D03               	btfss	3,2
  2871     010D  292F               	goto	i1l1894
  2872                           
  2873                           ;Control.c: 47:         if(Pressed == 0){Stop();}
  2874     010E  0836               	movf	_Pressed,w
  2875     010F  0437               	iorwf	_Pressed+1,w
  2876     0110  1D03               	btfss	3,2
  2877     0111  2914               	goto	i1l1878
  2878     0112  26ED               	fcall	i1_Stop
  2879     0113  0008               	return
  2880     0114                     i1l1878:
  2881     0114  0336               	decf	_Pressed,w
  2882     0115  0437               	iorwf	_Pressed+1,w
  2883     0116  1D03               	btfss	3,2
  2884     0117  291A               	goto	i1l1882
  2885     0118  26BF               	fcall	i1_MoveForward
  2886     0119  0008               	return
  2887     011A                     i1l1882:
  2888     011A  3002               	movlw	2
  2889     011B  0636               	xorwf	_Pressed,w
  2890     011C  0437               	iorwf	_Pressed+1,w
  2891     011D  1D03               	btfss	3,2
  2892     011E  2921               	goto	i1l1886
  2893     011F  26D6               	fcall	i1_MoveBackward
  2894     0120  0008               	return
  2895     0121                     i1l1886:
  2896     0121  3003               	movlw	3
  2897     0122  0636               	xorwf	_Pressed,w
  2898     0123  0437               	iorwf	_Pressed+1,w
  2899     0124  1D03               	btfss	3,2
  2900     0125  2928               	goto	i1l1890
  2901     0126  26A8               	fcall	i1_MoveLeft
  2902     0127  0008               	return
  2903     0128                     i1l1890:
  2904     0128  3004               	movlw	4
  2905     0129  0636               	xorwf	_Pressed,w
  2906     012A  0437               	iorwf	_Pressed+1,w
  2907     012B  1D03               	btfss	3,2
  2908     012C  0008               	return
  2909     012D  2691               	fcall	i1_MoveRight
  2910     012E  0008               	return
  2911     012F                     i1l1894:
  2912     012F  0838               	movf	_ManualMode,w
  2913     0130  0439               	iorwf	_ManualMode+1,w
  2914     0131  1D03               	btfss	3,2
  2915     0132  0008               	return
  2916                           
  2917                           ;Control.c: 62:         if(PORTAbits.RA0 == 1 || PORTAbits.RA7 == 1 || PORTBbits.RB5 == 
      +                          0){
  2918     0133  1C05               	btfss	5,0	;volatile
  2919     0134  1B85               	btfsc	5,7	;volatile
  2920     0135  2938               	goto	i1l1902
  2921     0136  1A86               	btfsc	6,5	;volatile
  2922     0137  2954               	goto	i1l58
  2923     0138                     i1l1902:
  2924                           
  2925                           ;Control.c: 66:             if(i<=4){
  2926     0138  0831               	movf	_i+1,w
  2927     0139  3A80               	xorlw	128
  2928     013A  00FF               	movwf	127
  2929     013B  3080               	movlw	128
  2930     013C  027F               	subwf	127,w
  2931     013D  1D03               	skipz
  2932     013E  2941               	goto	u197_25
  2933     013F  3005               	movlw	5
  2934     0140  0230               	subwf	_i,w
  2935     0141                     u197_25:
  2936     0141  1803               	skipnc
  2937     0142  2952               	goto	i1l1908
  2938                           
  2939                           ;Control.c: 67:               MoveForward();
  2940     0143  26BF               	fcall	i1_MoveForward
  2941     0144                     L2:
  2942                           
  2943                           ;Control.c: 68:               Delay_Seg(1);
  2944     0144  3001               	movlw	1
  2945     0145  00F6               	movwf	i1Delay_Seg@j
  2946     0146  3000               	movlw	0
  2947     0147  00F7               	movwf	i1Delay_Seg@j+1
  2948     0148  2545               	fcall	i1_Delay_Seg
  2949                           
  2950                           ;Control.c: 69:               i++;
  2951     0149  3001               	movlw	1
  2952     014A  1283               	bcf	3,5	;RP0=0, select bank0
  2953     014B  1303               	bcf	3,6	;RP1=0, select bank0
  2954     014C  07B0               	addwf	_i,f
  2955     014D  1803               	skipnc
  2956     014E  0AB1               	incf	_i+1,f
  2957     014F  3000               	movlw	0
  2958     0150  07B1               	addwf	_i+1,f
  2959                           
  2960                           ;Control.c: 70:             }
  2961     0151  0008               	return
  2962     0152                     i1l1908:
  2963                           
  2964                           ;Control.c: 72:               MoveLeft();
  2965     0152  26A8               	fcall	i1_MoveLeft
  2966     0153  2944               	goto	L2
  2967     0154                     i1l58:	
  2968                           ;Control.c: 94:         else if(PORTAbits.RA0 == 0 || PORTAbits.RA7 == 0 || PORTBbits.RB
      +                          5 == 1){
  2969                           
  2970                           ;Control.c: 73:               Delay_Seg(1);
  2971                           
  2972     0154  1805               	btfsc	5,0	;volatile
  2973     0155  1F85               	btfss	5,7	;volatile
  2974     0156  2959               	goto	i1l1930
  2975     0157  1E86               	btfss	6,5	;volatile
  2976     0158  0008               	return
  2977     0159                     i1l1930:
  2978                           
  2979                           ;Control.c: 96:             Stop();
  2980     0159  26ED               	fcall	i1_Stop
  2981                           
  2982                           ;Control.c: 97:             MoveBackward();
  2983     015A  26D6               	fcall	i1_MoveBackward
  2984                           
  2985                           ;Control.c: 98:             Delay_Seg(2);
  2986     015B  3002               	movlw	2
  2987     015C  00F6               	movwf	i1Delay_Seg@j
  2988     015D  3000               	movlw	0
  2989     015E  00F7               	movwf	i1Delay_Seg@j+1
  2990     015F  2545               	fcall	i1_Delay_Seg
  2991                           
  2992                           ;Control.c: 99:             Stop();
  2993     0160  26ED               	fcall	i1_Stop
  2994                           
  2995                           ;Control.c: 100:             MoveRight();
  2996     0161  2691               	fcall	i1_MoveRight
  2997                           
  2998                           ;Control.c: 101:             Delay_Seg(3);
  2999     0162  3003               	movlw	3
  3000     0163  00F6               	movwf	i1Delay_Seg@j
  3001     0164  3000               	movlw	0
  3002     0165  00F7               	movwf	i1Delay_Seg@j+1
  3003     0166  2545               	fcall	i1_Delay_Seg
  3004                           
  3005                           ;Control.c: 102:             Stop();
  3006     0167  26ED               	fcall	i1_Stop
  3007     0168  0008               	return
  3008     0169                     __end_ofi1_RobotControl:
  3009                           
  3010                           	psect	text20
  3011     0691                     __ptext20:	
  3012 ;; *************** function i1_MoveRight *****************
  3013 ;; Defined at:
  3014 ;;		line 28 in file "Control.c"
  3015 ;; Parameters:    Size  Location     Type
  3016 ;;		None
  3017 ;; Auto vars:     Size  Location     Type
  3018 ;;		None
  3019 ;; Return value:  Size  Location     Type
  3020 ;;                  1    wreg      void 
  3021 ;; Registers used:
  3022 ;;		wreg, status,2, status,0, pclath, cstack
  3023 ;; Tracked objects:
  3024 ;;		On entry : 0/0
  3025 ;;		On exit  : 0/0
  3026 ;;		Unchanged: 0/0
  3027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3028 ;;      Params:         0       0       0       0
  3029 ;;      Locals:         0       0       0       0
  3030 ;;      Temps:          0       0       0       0
  3031 ;;      Totals:         0       0       0       0
  3032 ;;Total ram usage:        0 bytes
  3033 ;; Hardware stack levels used: 1
  3034 ;; Hardware stack levels required when called: 1
  3035 ;; This function calls:
  3036 ;;		i1_M1Left
  3037 ;;		i1_M1Right
  3038 ;;		i1_M2Left
  3039 ;;		i1_M2Right
  3040 ;; This function is called by:
  3041 ;;		i1_RobotControl
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045     0691                     i1_MoveRight:	
  3046                           ;psect for function i1_MoveRight
  3047                           
  3048                           
  3049                           ;Control.c: 29:     M1Left(0);
  3050                           
  3051                           ;incstack = 0
  3052                           ; Regs used in i1_MoveRight: [wreg+status,2+status,0+pclath+cstack]
  3053     0691  3000               	movlw	0
  3054     0692  00F0               	movwf	i1M1Left@PWM
  3055     0693  00F1               	movwf	i1M1Left@PWM+1
  3056     0694  226E               	fcall	i1_M1Left
  3057                           
  3058                           ;Control.c: 30:     M1Right(MotorPWM);
  3059     0695  1283               	bcf	3,5	;RP0=0, select bank0
  3060     0696  1303               	bcf	3,6	;RP1=0, select bank0
  3061     0697  0840               	movf	_MotorPWM+1,w
  3062     0698  00F1               	movwf	i1M1Right@PWM+1
  3063     0699  083F               	movf	_MotorPWM,w
  3064     069A  00F0               	movwf	i1M1Right@PWM
  3065     069B  2217               	fcall	i1_M1Right
  3066                           
  3067                           ;Control.c: 31:     M2Left(0);
  3068     069C  3000               	movlw	0
  3069     069D  00F0               	movwf	i1M2Left@PWM
  3070     069E  00F1               	movwf	i1M2Left@PWM+1
  3071     069F  21C0               	fcall	i1_M2Left
  3072                           
  3073                           ;Control.c: 32:     M2Right(MotorPWM);
  3074     06A0  1283               	bcf	3,5	;RP0=0, select bank0
  3075     06A1  1303               	bcf	3,6	;RP1=0, select bank0
  3076     06A2  0840               	movf	_MotorPWM+1,w
  3077     06A3  00F1               	movwf	i1M2Right@PWM+1
  3078     06A4  083F               	movf	_MotorPWM,w
  3079     06A5  00F0               	movwf	i1M2Right@PWM
  3080     06A6  2169               	fcall	i1_M2Right
  3081     06A7  0008               	return
  3082     06A8                     __end_ofi1_MoveRight:
  3083                           
  3084                           	psect	text21
  3085     06A8                     __ptext21:	
  3086 ;; *************** function i1_MoveLeft *****************
  3087 ;; Defined at:
  3088 ;;		line 20 in file "Control.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;		None
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;		None
  3093 ;; Return value:  Size  Location     Type
  3094 ;;                  1    wreg      void 
  3095 ;; Registers used:
  3096 ;;		wreg, status,2, status,0, pclath, cstack
  3097 ;; Tracked objects:
  3098 ;;		On entry : 0/0
  3099 ;;		On exit  : 0/0
  3100 ;;		Unchanged: 0/0
  3101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3102 ;;      Params:         0       0       0       0
  3103 ;;      Locals:         0       0       0       0
  3104 ;;      Temps:          0       0       0       0
  3105 ;;      Totals:         0       0       0       0
  3106 ;;Total ram usage:        0 bytes
  3107 ;; Hardware stack levels used: 1
  3108 ;; Hardware stack levels required when called: 1
  3109 ;; This function calls:
  3110 ;;		i1_M1Left
  3111 ;;		i1_M1Right
  3112 ;;		i1_M2Left
  3113 ;;		i1_M2Right
  3114 ;; This function is called by:
  3115 ;;		i1_RobotControl
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119     06A8                     i1_MoveLeft:	
  3120                           ;psect for function i1_MoveLeft
  3121                           
  3122                           
  3123                           ;Control.c: 21:     M1Left(0);
  3124                           
  3125                           ;incstack = 0
  3126                           ; Regs used in i1_MoveLeft: [wreg+status,2+status,0+pclath+cstack]
  3127     06A8  3000               	movlw	0
  3128     06A9  00F0               	movwf	i1M1Left@PWM
  3129     06AA  00F1               	movwf	i1M1Left@PWM+1
  3130     06AB  226E               	fcall	i1_M1Left
  3131                           
  3132                           ;Control.c: 22:     M1Right(MotorPWM);
  3133     06AC  1283               	bcf	3,5	;RP0=0, select bank0
  3134     06AD  1303               	bcf	3,6	;RP1=0, select bank0
  3135     06AE  0840               	movf	_MotorPWM+1,w
  3136     06AF  00F1               	movwf	i1M1Right@PWM+1
  3137     06B0  083F               	movf	_MotorPWM,w
  3138     06B1  00F0               	movwf	i1M1Right@PWM
  3139     06B2  2217               	fcall	i1_M1Right
  3140                           
  3141                           ;Control.c: 23:     M2Right(0);
  3142     06B3  3000               	movlw	0
  3143     06B4  00F0               	movwf	i1M2Right@PWM
  3144     06B5  00F1               	movwf	i1M2Right@PWM+1
  3145     06B6  2169               	fcall	i1_M2Right
  3146                           
  3147                           ;Control.c: 24:     M2Left(MotorPWM);
  3148     06B7  1283               	bcf	3,5	;RP0=0, select bank0
  3149     06B8  1303               	bcf	3,6	;RP1=0, select bank0
  3150     06B9  0840               	movf	_MotorPWM+1,w
  3151     06BA  00F1               	movwf	i1M2Left@PWM+1
  3152     06BB  083F               	movf	_MotorPWM,w
  3153     06BC  00F0               	movwf	i1M2Left@PWM
  3154     06BD  21C0               	fcall	i1_M2Left
  3155     06BE  0008               	return
  3156     06BF                     __end_ofi1_MoveLeft:
  3157                           
  3158                           	psect	text22
  3159     06BF                     __ptext22:	
  3160 ;; *************** function i1_MoveForward *****************
  3161 ;; Defined at:
  3162 ;;		line 6 in file "Control.c"
  3163 ;; Parameters:    Size  Location     Type
  3164 ;;		None
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;		None
  3167 ;; Return value:  Size  Location     Type
  3168 ;;                  1    wreg      void 
  3169 ;; Registers used:
  3170 ;;		wreg, status,2, status,0, pclath, cstack
  3171 ;; Tracked objects:
  3172 ;;		On entry : 0/0
  3173 ;;		On exit  : 0/0
  3174 ;;		Unchanged: 0/0
  3175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3176 ;;      Params:         0       0       0       0
  3177 ;;      Locals:         0       0       0       0
  3178 ;;      Temps:          0       0       0       0
  3179 ;;      Totals:         0       0       0       0
  3180 ;;Total ram usage:        0 bytes
  3181 ;; Hardware stack levels used: 1
  3182 ;; Hardware stack levels required when called: 1
  3183 ;; This function calls:
  3184 ;;		i1_M1Left
  3185 ;;		i1_M1Right
  3186 ;;		i1_M2Left
  3187 ;;		i1_M2Right
  3188 ;; This function is called by:
  3189 ;;		i1_RobotControl
  3190 ;; This function uses a non-reentrant model
  3191 ;;
  3192                           
  3193     06BF                     i1_MoveForward:	
  3194                           ;psect for function i1_MoveForward
  3195                           
  3196                           
  3197                           ;Control.c: 7:     M1Right(0);
  3198                           
  3199                           ;incstack = 0
  3200                           ; Regs used in i1_MoveForward: [wreg+status,2+status,0+pclath+cstack]
  3201     06BF  3000               	movlw	0
  3202     06C0  00F0               	movwf	i1M1Right@PWM
  3203     06C1  00F1               	movwf	i1M1Right@PWM+1
  3204     06C2  2217               	fcall	i1_M1Right
  3205                           
  3206                           ;Control.c: 8:     M1Left(MotorPWM);
  3207     06C3  1283               	bcf	3,5	;RP0=0, select bank0
  3208     06C4  1303               	bcf	3,6	;RP1=0, select bank0
  3209     06C5  0840               	movf	_MotorPWM+1,w
  3210     06C6  00F1               	movwf	i1M1Left@PWM+1
  3211     06C7  083F               	movf	_MotorPWM,w
  3212     06C8  00F0               	movwf	i1M1Left@PWM
  3213     06C9  226E               	fcall	i1_M1Left
  3214                           
  3215                           ;Control.c: 9:     M2Left(0);
  3216     06CA  3000               	movlw	0
  3217     06CB  00F0               	movwf	i1M2Left@PWM
  3218     06CC  00F1               	movwf	i1M2Left@PWM+1
  3219     06CD  21C0               	fcall	i1_M2Left
  3220                           
  3221                           ;Control.c: 10:     M2Right(MotorPWM);
  3222     06CE  1283               	bcf	3,5	;RP0=0, select bank0
  3223     06CF  1303               	bcf	3,6	;RP1=0, select bank0
  3224     06D0  0840               	movf	_MotorPWM+1,w
  3225     06D1  00F1               	movwf	i1M2Right@PWM+1
  3226     06D2  083F               	movf	_MotorPWM,w
  3227     06D3  00F0               	movwf	i1M2Right@PWM
  3228     06D4  2169               	fcall	i1_M2Right
  3229     06D5  0008               	return
  3230     06D6                     __end_ofi1_MoveForward:
  3231                           
  3232                           	psect	text23
  3233     06D6                     __ptext23:	
  3234 ;; *************** function i1_MoveBackward *****************
  3235 ;; Defined at:
  3236 ;;		line 13 in file "Control.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;		None
  3241 ;; Return value:  Size  Location     Type
  3242 ;;                  1    wreg      void 
  3243 ;; Registers used:
  3244 ;;		wreg, status,2, status,0, pclath, cstack
  3245 ;; Tracked objects:
  3246 ;;		On entry : 0/0
  3247 ;;		On exit  : 0/0
  3248 ;;		Unchanged: 0/0
  3249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3250 ;;      Params:         0       0       0       0
  3251 ;;      Locals:         0       0       0       0
  3252 ;;      Temps:          0       0       0       0
  3253 ;;      Totals:         0       0       0       0
  3254 ;;Total ram usage:        0 bytes
  3255 ;; Hardware stack levels used: 1
  3256 ;; Hardware stack levels required when called: 1
  3257 ;; This function calls:
  3258 ;;		i1_M1Left
  3259 ;;		i1_M1Right
  3260 ;;		i1_M2Left
  3261 ;;		i1_M2Right
  3262 ;; This function is called by:
  3263 ;;		i1_RobotControl
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267     06D6                     i1_MoveBackward:	
  3268                           ;psect for function i1_MoveBackward
  3269                           
  3270                           
  3271                           ;Control.c: 14:     M1Left(0);
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in i1_MoveBackward: [wreg+status,2+status,0+pclath+cstack]
  3275     06D6  3000               	movlw	0
  3276     06D7  00F0               	movwf	i1M1Left@PWM
  3277     06D8  00F1               	movwf	i1M1Left@PWM+1
  3278     06D9  226E               	fcall	i1_M1Left
  3279                           
  3280                           ;Control.c: 15:     M1Right(MotorPWM);
  3281     06DA  1283               	bcf	3,5	;RP0=0, select bank0
  3282     06DB  1303               	bcf	3,6	;RP1=0, select bank0
  3283     06DC  0840               	movf	_MotorPWM+1,w
  3284     06DD  00F1               	movwf	i1M1Right@PWM+1
  3285     06DE  083F               	movf	_MotorPWM,w
  3286     06DF  00F0               	movwf	i1M1Right@PWM
  3287     06E0  2217               	fcall	i1_M1Right
  3288                           
  3289                           ;Control.c: 16:     M2Right(0);
  3290     06E1  3000               	movlw	0
  3291     06E2  00F0               	movwf	i1M2Right@PWM
  3292     06E3  00F1               	movwf	i1M2Right@PWM+1
  3293     06E4  2169               	fcall	i1_M2Right
  3294                           
  3295                           ;Control.c: 17:     M2Left(MotorPWM);
  3296     06E5  1283               	bcf	3,5	;RP0=0, select bank0
  3297     06E6  1303               	bcf	3,6	;RP1=0, select bank0
  3298     06E7  0840               	movf	_MotorPWM+1,w
  3299     06E8  00F1               	movwf	i1M2Left@PWM+1
  3300     06E9  083F               	movf	_MotorPWM,w
  3301     06EA  00F0               	movwf	i1M2Left@PWM
  3302     06EB  21C0               	fcall	i1_M2Left
  3303     06EC  0008               	return
  3304     06ED                     __end_ofi1_MoveBackward:
  3305                           
  3306                           	psect	text24
  3307     0545                     __ptext24:	
  3308 ;; *************** function i1_Delay_Seg *****************
  3309 ;; Defined at:
  3310 ;;		line 17 in file "MyDelays.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;  j               2    6[COMMON] unsigned int 
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  i               2   10[COMMON] int 
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, pclath, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3324 ;;      Params:         2       0       0       0
  3325 ;;      Locals:         2       0       0       0
  3326 ;;      Temps:          2       0       0       0
  3327 ;;      Totals:         6       0       0       0
  3328 ;;Total ram usage:        6 bytes
  3329 ;; Hardware stack levels used: 1
  3330 ;; Hardware stack levels required when called: 1
  3331 ;; This function calls:
  3332 ;;		i1___wmul
  3333 ;; This function is called by:
  3334 ;;		i1_RobotControl
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338     0545                     i1_Delay_Seg:	
  3339                           ;psect for function i1_Delay_Seg
  3340                           
  3341                           
  3342                           ;MyDelays.c: 19:     int i;;MyDelays.c: 21:     j=j*100;
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in i1_Delay_Seg: [wreg+status,2+status,0+pclath+cstack]
  3346     0545  0877               	movf	i1Delay_Seg@j+1,w
  3347     0546  00F1               	movwf	i1___wmul@multiplier+1
  3348     0547  0876               	movf	i1Delay_Seg@j,w
  3349     0548  00F0               	movwf	i1___wmul@multiplier
  3350     0549  3064               	movlw	100
  3351     054A  00F2               	movwf	i1___wmul@multiplicand
  3352     054B  3000               	movlw	0
  3353     054C  00F3               	movwf	i1___wmul@multiplicand+1
  3354     054D  25AF               	fcall	i1___wmul
  3355     054E  0871               	movf	?i1___wmul+1,w
  3356     054F  00F7               	movwf	i1Delay_Seg@j+1
  3357     0550  0870               	movf	?i1___wmul,w
  3358     0551  00F6               	movwf	i1Delay_Seg@j
  3359                           
  3360                           ;MyDelays.c: 23:     for(i=0;i<j;i++){
  3361     0552  01FA               	clrf	i1Delay_Seg@i
  3362     0553  01FB               	clrf	i1Delay_Seg@i+1
  3363     0554                     i1l161:
  3364     0554  0877               	movf	i1Delay_Seg@j+1,w
  3365     0555  027B               	subwf	i1Delay_Seg@i+1,w
  3366     0556  1D03               	skipz
  3367     0557  2D5A               	goto	u162_25
  3368     0558  0876               	movf	i1Delay_Seg@j,w
  3369     0559  027A               	subwf	i1Delay_Seg@i,w
  3370     055A                     u162_25:
  3371     055A  1803               	btfsc	3,0
  3372     055B  0008               	return
  3373                           
  3374                           ;MyDelays.c: 25:         _delay((unsigned long)((10)*(8000000/4000.0)));
  3375     055C  301A               	movlw	26
  3376     055D  00F9               	movwf	??i1_Delay_Seg+1
  3377     055E  30F8               	movlw	248
  3378     055F  00F8               	movwf	??i1_Delay_Seg
  3379     0560                     u205_27:
  3380     0560  0BF8               	decfsz	??i1_Delay_Seg,f
  3381     0561  2D60               	goto	u205_27
  3382     0562  0BF9               	decfsz	??i1_Delay_Seg+1,f
  3383     0563  2D60               	goto	u205_27
  3384     0564  0000               	nop
  3385                           
  3386                           ;MyDelays.c: 27:     }
  3387     0565  3001               	movlw	1
  3388     0566  07FA               	addwf	i1Delay_Seg@i,f
  3389     0567  1803               	skipnc
  3390     0568  0AFB               	incf	i1Delay_Seg@i+1,f
  3391     0569  3000               	movlw	0
  3392     056A  07FB               	addwf	i1Delay_Seg@i+1,f
  3393     056B  2D54               	goto	i1l161
  3394     056C                     __end_ofi1_Delay_Seg:
  3395                           
  3396                           	psect	text25
  3397     05AF                     __ptext25:	
  3398 ;; *************** function i1___wmul *****************
  3399 ;; Defined at:
  3400 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul16.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  multiplier      2    0[COMMON] unsigned int 
  3403 ;;  multiplicand    2    2[COMMON] unsigned int 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  product         2    4[COMMON] unsigned int 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  2    0[COMMON] unsigned int 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, status,0
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3415 ;;      Params:         4       0       0       0
  3416 ;;      Locals:         2       0       0       0
  3417 ;;      Temps:          0       0       0       0
  3418 ;;      Totals:         6       0       0       0
  3419 ;;Total ram usage:        6 bytes
  3420 ;; Hardware stack levels used: 1
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		i1_Delay_Seg
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428     05AF                     i1___wmul:	
  3429                           ;psect for function i1___wmul
  3430                           
  3431                           
  3432                           ;incstack = 0
  3433                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  3434     05AF  01F4               	clrf	i1___wmul@product
  3435     05B0  01F5               	clrf	i1___wmul@product+1
  3436     05B1                     i1l1636:
  3437     05B1  1C70               	btfss	i1___wmul@multiplier,0
  3438     05B2  2DB9               	goto	i1l406
  3439     05B3  0872               	movf	i1___wmul@multiplicand,w
  3440     05B4  07F4               	addwf	i1___wmul@product,f
  3441     05B5  1803               	skipnc
  3442     05B6  0AF5               	incf	i1___wmul@product+1,f
  3443     05B7  0873               	movf	i1___wmul@multiplicand+1,w
  3444     05B8  07F5               	addwf	i1___wmul@product+1,f
  3445     05B9                     i1l406:
  3446     05B9  3001               	movlw	1
  3447     05BA                     u150_25:
  3448     05BA  1003               	clrc
  3449     05BB  0DF2               	rlf	i1___wmul@multiplicand,f
  3450     05BC  0DF3               	rlf	i1___wmul@multiplicand+1,f
  3451     05BD  3EFF               	addlw	-1
  3452     05BE  1D03               	skipz
  3453     05BF  2DBA               	goto	u150_25
  3454     05C0  3001               	movlw	1
  3455     05C1                     u151_25:
  3456     05C1  1003               	clrc
  3457     05C2  0CF1               	rrf	i1___wmul@multiplier+1,f
  3458     05C3  0CF0               	rrf	i1___wmul@multiplier,f
  3459     05C4  3EFF               	addlw	-1
  3460     05C5  1D03               	skipz
  3461     05C6  2DC1               	goto	u151_25
  3462     05C7  0870               	movf	i1___wmul@multiplier,w
  3463     05C8  0471               	iorwf	i1___wmul@multiplier+1,w
  3464     05C9  1D03               	btfss	3,2
  3465     05CA  2DB1               	goto	i1l1636
  3466     05CB  0875               	movf	i1___wmul@product+1,w
  3467     05CC  00F1               	movwf	?i1___wmul+1
  3468     05CD  0874               	movf	i1___wmul@product,w
  3469     05CE  00F0               	movwf	?i1___wmul
  3470     05CF  0008               	return
  3471     05D0                     __end_ofi1___wmul:
  3472                           
  3473                           	psect	text26
  3474     05D0                     __ptext26:	
  3475 ;; *************** function _USARTRead *****************
  3476 ;; Defined at:
  3477 ;;		line 30 in file "USART.c"
  3478 ;; Parameters:    Size  Location     Type
  3479 ;;  Rxdata          1    wreg     PTR unsigned char 
  3480 ;;		 -> HC06_Data(3), 
  3481 ;; Auto vars:     Size  Location     Type
  3482 ;;  Rxdata          1    3[COMMON] PTR unsigned char 
  3483 ;;		 -> HC06_Data(3), 
  3484 ;;  j               2    4[COMMON] int 
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  2    0[COMMON] int 
  3487 ;; Registers used:
  3488 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3489 ;; Tracked objects:
  3490 ;;		On entry : 300/0
  3491 ;;		On exit  : 300/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3494 ;;      Params:         2       0       0       0
  3495 ;;      Locals:         3       0       0       0
  3496 ;;      Temps:          1       0       0       0
  3497 ;;      Totals:         6       0       0       0
  3498 ;;Total ram usage:        6 bytes
  3499 ;; Hardware stack levels used: 1
  3500 ;; This function calls:
  3501 ;;		Nothing
  3502 ;; This function is called by:
  3503 ;;		_GeneralInterrupt
  3504 ;; This function uses a non-reentrant model
  3505 ;;
  3506                           
  3507     05D0                     _USARTRead:	
  3508                           ;psect for function _USARTRead
  3509                           
  3510                           
  3511                           ;incstack = 0
  3512                           ; Regs used in _USARTRead: [wreg-fsr0h+status,2+status,0]
  3513                           ;USARTRead@Rxdata stored from wreg
  3514     05D0  00F3               	movwf	USARTRead@Rxdata
  3515                           
  3516                           ;USART.c: 32:     int j=0;
  3517     05D1  01F4               	clrf	USARTRead@j
  3518     05D2  01F5               	clrf	USARTRead@j+1
  3519     05D3                     i1l1836:	
  3520                           ;USART.c: 34:     while(PIR1bits.RCIF){
  3521                           
  3522                           
  3523                           ;USART.c: 34:     while(PIR1bits.RCIF){
  3524     05D3  1E8C               	btfss	12,5	;volatile
  3525     05D4  2DEC               	goto	i1l1838
  3526                           
  3527                           ;USART.c: 36:             if(RCSTAbits.OERR == 1)
  3528     05D5  1C98               	btfss	24,1	;volatile
  3529     05D6  2DD9               	goto	i1l277
  3530                           
  3531                           ;USART.c: 37:                {RCSTAbits.CREN = 0;
  3532     05D7  1218               	bcf	24,4	;volatile
  3533                           
  3534                           ;USART.c: 38:                 RCSTAbits.CREN = 1;}
  3535     05D8  1618               	bsf	24,4	;volatile
  3536     05D9                     i1l277:
  3537                           
  3538                           ;USART.c: 39:             if(RCSTAbits.FERR == 1)
  3539     05D9  1D18               	btfss	24,2	;volatile
  3540     05DA  2DDD               	goto	i1l1832
  3541                           
  3542                           ;USART.c: 40:                {RCSTAbits.SPEN = 0;
  3543     05DB  1398               	bcf	24,7	;volatile
  3544                           
  3545                           ;USART.c: 41:                 RCSTAbits.SPEN = 1;}
  3546     05DC  1798               	bsf	24,7	;volatile
  3547     05DD                     i1l1832:
  3548                           
  3549                           ;USART.c: 43:             Rxdata[j]=RCREG;
  3550     05DD  0874               	movf	USARTRead@j,w
  3551     05DE  0773               	addwf	USARTRead@Rxdata,w
  3552     05DF  00F2               	movwf	??_USARTRead
  3553     05E0  0872               	movf	??_USARTRead,w
  3554     05E1  0084               	movwf	4
  3555     05E2  081A               	movf	26,w	;volatile
  3556     05E3  1383               	bcf	3,7	;select IRP bank0
  3557     05E4  0080               	movwf	0
  3558                           
  3559                           ;USART.c: 44:             j++;
  3560     05E5  3001               	movlw	1
  3561     05E6  07F4               	addwf	USARTRead@j,f
  3562     05E7  1803               	skipnc
  3563     05E8  0AF5               	incf	USARTRead@j+1,f
  3564     05E9  3000               	movlw	0
  3565     05EA  07F5               	addwf	USARTRead@j+1,f
  3566     05EB  2DD3               	goto	i1l1836
  3567     05EC                     i1l1838:
  3568                           
  3569                           ;USART.c: 48:     return j;
  3570     05EC  0875               	movf	USARTRead@j+1,w
  3571     05ED  00F1               	movwf	?_USARTRead+1
  3572     05EE  0874               	movf	USARTRead@j,w
  3573     05EF  00F0               	movwf	?_USARTRead
  3574     05F0  0008               	return
  3575     05F1                     __end_of_USARTRead:
  3576                           
  3577                           	psect	text27
  3578     0022                     __ptext27:	
  3579 ;; *************** function _ReceiveControl *****************
  3580 ;; Defined at:
  3581 ;;		line 96 in file "USART.c"
  3582 ;; Parameters:    Size  Location     Type
  3583 ;;  Rxdata          1    wreg     PTR unsigned char 
  3584 ;;		 -> HC06_Data(3), 
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;  Rxdata          1    8[COMMON] PTR unsigned char 
  3587 ;;		 -> HC06_Data(3), 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;                  1    wreg      void 
  3590 ;; Registers used:
  3591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3592 ;; Tracked objects:
  3593 ;;		On entry : 300/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3597 ;;      Params:         0       0       0       0
  3598 ;;      Locals:         1       0       0       0
  3599 ;;      Temps:          0       0       0       0
  3600 ;;      Totals:         1       0       0       0
  3601 ;;Total ram usage:        1 bytes
  3602 ;; Hardware stack levels used: 1
  3603 ;; Hardware stack levels required when called: 2
  3604 ;; This function calls:
  3605 ;;		_DataCompare
  3606 ;;		i1_Stop
  3607 ;; This function is called by:
  3608 ;;		_GeneralInterrupt
  3609 ;; This function uses a non-reentrant model
  3610 ;;
  3611                           
  3612     0022                     _ReceiveControl:	
  3613                           ;psect for function _ReceiveControl
  3614                           
  3615                           
  3616                           ;incstack = 0
  3617                           ; Regs used in _ReceiveControl: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3618                           ;ReceiveControl@Rxdata stored from wreg
  3619     0022  00F8               	movwf	ReceiveControl@Rxdata
  3620                           
  3621                           ;USART.c: 98:     if(DataCompare(Rxdata, "M",1)){
  3622     0023  3035               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  3623     0024  00F0               	movwf	DataCompare@Data
  3624     0025  3001               	movlw	1
  3625     0026  00F1               	movwf	DataCompare@length
  3626     0027  3000               	movlw	0
  3627     0028  00F2               	movwf	DataCompare@length+1
  3628     0029  0878               	movf	ReceiveControl@Rxdata,w
  3629     002A  2451               	fcall	_DataCompare
  3630     002B  0870               	movf	?_DataCompare,w
  3631     002C  0471               	iorwf	?_DataCompare+1,w
  3632     002D  1903               	btfsc	3,2
  3633     002E  2837               	goto	i1l1848
  3634                           
  3635                           ;USART.c: 99:         ManualMode = 1;
  3636     002F  3001               	movlw	1
  3637     0030  1283               	bcf	3,5	;RP0=0, select bank0
  3638     0031  1303               	bcf	3,6	;RP1=0, select bank0
  3639     0032  00B8               	movwf	_ManualMode
  3640     0033  3000               	movlw	0
  3641     0034  00B9               	movwf	_ManualMode+1
  3642                           
  3643                           ;USART.c: 100:         Stop();
  3644     0035  26ED               	fcall	i1_Stop
  3645                           
  3646                           ;USART.c: 101:     }
  3647     0036  0008               	return
  3648     0037                     i1l1848:
  3649     0037  302F               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  3650     0038  00F0               	movwf	DataCompare@Data
  3651     0039  3001               	movlw	1
  3652     003A  00F1               	movwf	DataCompare@length
  3653     003B  3000               	movlw	0
  3654     003C  00F2               	movwf	DataCompare@length+1
  3655     003D  0878               	movf	ReceiveControl@Rxdata,w
  3656     003E  2451               	fcall	_DataCompare
  3657     003F  0870               	movf	?_DataCompare,w
  3658     0040  0471               	iorwf	?_DataCompare+1,w
  3659     0041  1903               	btfsc	3,2
  3660     0042  2848               	goto	i1l1852
  3661                           
  3662                           ;USART.c: 103:         ManualMode = 0;
  3663     0043  1283               	bcf	3,5	;RP0=0, select bank0
  3664     0044  1303               	bcf	3,6	;RP1=0, select bank0
  3665     0045  01B8               	clrf	_ManualMode
  3666     0046  01B9               	clrf	_ManualMode+1
  3667                           
  3668                           ;USART.c: 104:     }
  3669     0047  0008               	return
  3670     0048                     i1l1852:
  3671     0048  3039               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  3672     0049  00F0               	movwf	DataCompare@Data
  3673     004A  3001               	movlw	1
  3674     004B  00F1               	movwf	DataCompare@length
  3675     004C  3000               	movlw	0
  3676     004D  00F2               	movwf	DataCompare@length+1
  3677     004E  0878               	movf	ReceiveControl@Rxdata,w
  3678     004F  2451               	fcall	_DataCompare
  3679     0050  0870               	movf	?_DataCompare,w
  3680     0051  0471               	iorwf	?_DataCompare+1,w
  3681     0052  1903               	btfsc	3,2
  3682     0053  285B               	goto	i1l1856
  3683     0054  3001               	movlw	1
  3684     0055  1283               	bcf	3,5	;RP0=0, select bank0
  3685     0056  1303               	bcf	3,6	;RP1=0, select bank0
  3686     0057  00B6               	movwf	_Pressed
  3687     0058  3000               	movlw	0
  3688     0059  00B7               	movwf	_Pressed+1
  3689     005A  0008               	return
  3690     005B                     i1l1856:
  3691     005B  3031               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  3692     005C  00F0               	movwf	DataCompare@Data
  3693     005D  3001               	movlw	1
  3694     005E  00F1               	movwf	DataCompare@length
  3695     005F  3000               	movlw	0
  3696     0060  00F2               	movwf	DataCompare@length+1
  3697     0061  0878               	movf	ReceiveControl@Rxdata,w
  3698     0062  2451               	fcall	_DataCompare
  3699     0063  0870               	movf	?_DataCompare,w
  3700     0064  0471               	iorwf	?_DataCompare+1,w
  3701     0065  1903               	btfsc	3,2
  3702     0066  286E               	goto	i1l1860
  3703     0067  3002               	movlw	2
  3704     0068  1283               	bcf	3,5	;RP0=0, select bank0
  3705     0069  1303               	bcf	3,6	;RP1=0, select bank0
  3706     006A  00B6               	movwf	_Pressed
  3707     006B  3000               	movlw	0
  3708     006C  00B7               	movwf	_Pressed+1
  3709     006D  0008               	return
  3710     006E                     i1l1860:
  3711     006E  3033               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  3712     006F  00F0               	movwf	DataCompare@Data
  3713     0070  3001               	movlw	1
  3714     0071  00F1               	movwf	DataCompare@length
  3715     0072  3000               	movlw	0
  3716     0073  00F2               	movwf	DataCompare@length+1
  3717     0074  0878               	movf	ReceiveControl@Rxdata,w
  3718     0075  2451               	fcall	_DataCompare
  3719     0076  0870               	movf	?_DataCompare,w
  3720     0077  0471               	iorwf	?_DataCompare+1,w
  3721     0078  1903               	btfsc	3,2
  3722     0079  2881               	goto	i1l1864
  3723     007A  3003               	movlw	3
  3724     007B  1283               	bcf	3,5	;RP0=0, select bank0
  3725     007C  1303               	bcf	3,6	;RP1=0, select bank0
  3726     007D  00B6               	movwf	_Pressed
  3727     007E  3000               	movlw	0
  3728     007F  00B7               	movwf	_Pressed+1
  3729     0080  0008               	return
  3730     0081                     i1l1864:
  3731     0081  3037               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  3732     0082  00F0               	movwf	DataCompare@Data
  3733     0083  3001               	movlw	1
  3734     0084  00F1               	movwf	DataCompare@length
  3735     0085  3000               	movlw	0
  3736     0086  00F2               	movwf	DataCompare@length+1
  3737     0087  0878               	movf	ReceiveControl@Rxdata,w
  3738     0088  2451               	fcall	_DataCompare
  3739     0089  0870               	movf	?_DataCompare,w
  3740     008A  0471               	iorwf	?_DataCompare+1,w
  3741     008B  1903               	btfsc	3,2
  3742     008C  2894               	goto	i1l1868
  3743     008D  3004               	movlw	4
  3744     008E  1283               	bcf	3,5	;RP0=0, select bank0
  3745     008F  1303               	bcf	3,6	;RP1=0, select bank0
  3746     0090  00B6               	movwf	_Pressed
  3747     0091  3000               	movlw	0
  3748     0092  00B7               	movwf	_Pressed+1
  3749     0093  0008               	return
  3750     0094                     i1l1868:
  3751     0094  302D               	movlw	(low (((STR_1+8)-__stringbase)| (0+32768)))& (0+255)
  3752     0095  00F0               	movwf	DataCompare@Data
  3753     0096  3001               	movlw	1
  3754     0097  00F1               	movwf	DataCompare@length
  3755     0098  3000               	movlw	0
  3756     0099  00F2               	movwf	DataCompare@length+1
  3757     009A  0878               	movf	ReceiveControl@Rxdata,w
  3758     009B  2451               	fcall	_DataCompare
  3759     009C  0870               	movf	?_DataCompare,w
  3760     009D  0471               	iorwf	?_DataCompare+1,w
  3761     009E  1903               	btfsc	3,2
  3762     009F  0008               	return
  3763     00A0  1283               	bcf	3,5	;RP0=0, select bank0
  3764     00A1  1303               	bcf	3,6	;RP1=0, select bank0
  3765     00A2  01B6               	clrf	_Pressed
  3766     00A3  01B7               	clrf	_Pressed+1
  3767     00A4  0008               	return
  3768     00A5                     __end_of_ReceiveControl:
  3769                           
  3770                           	psect	text28
  3771     06ED                     __ptext28:	
  3772 ;; *************** function i1_Stop *****************
  3773 ;; Defined at:
  3774 ;;		line 35 in file "Control.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;		None
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0, pclath, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3788 ;;      Params:         0       0       0       0
  3789 ;;      Locals:         0       0       0       0
  3790 ;;      Temps:          0       0       0       0
  3791 ;;      Totals:         0       0       0       0
  3792 ;;Total ram usage:        0 bytes
  3793 ;; Hardware stack levels used: 1
  3794 ;; Hardware stack levels required when called: 1
  3795 ;; This function calls:
  3796 ;;		i1_M1Left
  3797 ;;		i1_M1Right
  3798 ;;		i1_M2Left
  3799 ;;		i1_M2Right
  3800 ;; This function is called by:
  3801 ;;		_ReceiveControl
  3802 ;;		i1_RobotControl
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806     06ED                     i1_Stop:	
  3807                           ;psect for function i1_Stop
  3808                           
  3809                           
  3810                           ;Control.c: 36:     M1Left(0);
  3811                           
  3812                           ;incstack = 0
  3813                           ; Regs used in i1_Stop: [wreg+status,2+status,0+pclath+cstack]
  3814     06ED  3000               	movlw	0
  3815     06EE  00F0               	movwf	i1M1Left@PWM
  3816     06EF  00F1               	movwf	i1M1Left@PWM+1
  3817     06F0  226E               	fcall	i1_M1Left
  3818                           
  3819                           ;Control.c: 37:     M1Right(0);
  3820     06F1  3000               	movlw	0
  3821     06F2  00F0               	movwf	i1M1Right@PWM
  3822     06F3  00F1               	movwf	i1M1Right@PWM+1
  3823     06F4  2217               	fcall	i1_M1Right
  3824                           
  3825                           ;Control.c: 38:     M2Left(0);
  3826     06F5  3000               	movlw	0
  3827     06F6  00F0               	movwf	i1M2Left@PWM
  3828     06F7  00F1               	movwf	i1M2Left@PWM+1
  3829     06F8  21C0               	fcall	i1_M2Left
  3830                           
  3831                           ;Control.c: 39:     M2Right(0);
  3832     06F9  3000               	movlw	0
  3833     06FA  00F0               	movwf	i1M2Right@PWM
  3834     06FB  00F1               	movwf	i1M2Right@PWM+1
  3835     06FC  2169               	fcall	i1_M2Right
  3836     06FD  0008               	return
  3837     06FE                     __end_ofi1_Stop:
  3838                           
  3839                           	psect	text29
  3840     0169                     __ptext29:	
  3841 ;; *************** function i1_M2Right *****************
  3842 ;; Defined at:
  3843 ;;		line 73 in file "PWM.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  PWM             2    0[COMMON] int 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;		None
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      void 
  3850 ;; Registers used:
  3851 ;;		wreg, status,2, status,0
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3857 ;;      Params:         2       0       0       0
  3858 ;;      Locals:         0       0       0       0
  3859 ;;      Temps:          1       0       0       0
  3860 ;;      Totals:         3       0       0       0
  3861 ;;Total ram usage:        3 bytes
  3862 ;; Hardware stack levels used: 1
  3863 ;; This function calls:
  3864 ;;		Nothing
  3865 ;; This function is called by:
  3866 ;;		i1_MoveForward
  3867 ;;		i1_MoveBackward
  3868 ;;		i1_MoveLeft
  3869 ;;		i1_MoveRight
  3870 ;;		i1_Stop
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873                           
  3874     0169                     i1_M2Right:	
  3875                           ;psect for function i1_M2Right
  3876                           
  3877                           
  3878                           ;PWM.c: 75:     if(PWM == 0){PORTAbits.RA2 = 1;}
  3879                           
  3880                           ;incstack = 0
  3881                           ; Regs used in i1_M2Right: [wreg+status,2+status,0]
  3882     0169  0870               	movf	i1M2Right@PWM,w
  3883     016A  0471               	iorwf	i1M2Right@PWM+1,w
  3884     016B  1D03               	btfss	3,2
  3885     016C  2971               	goto	i1l1616
  3886     016D  1283               	bcf	3,5	;RP0=0, select bank0
  3887     016E  1303               	bcf	3,6	;RP1=0, select bank0
  3888     016F  1505               	bsf	5,2	;volatile
  3889     0170  0008               	return
  3890     0171                     i1l1616:
  3891     0171  0871               	movf	i1M2Right@PWM+1,w
  3892     0172  3A80               	xorlw	128
  3893     0173  00F2               	movwf	??i1_M2Right
  3894     0174  1283               	bcf	3,5	;RP0=0, select bank0
  3895     0175  1303               	bcf	3,6	;RP1=0, select bank0
  3896     0176  083E               	movf	_PWM_Limit+1,w
  3897     0177  3A80               	xorlw	128
  3898     0178  0272               	subwf	??i1_M2Right,w
  3899     0179  1D03               	skipz
  3900     017A  297D               	goto	u145_25
  3901     017B  083D               	movf	_PWM_Limit,w
  3902     017C  0270               	subwf	i1M2Right@PWM,w
  3903     017D                     u145_25:
  3904     017D  1803               	skipnc
  3905     017E  29BC               	goto	i1l221
  3906                           
  3907                           ;PWM.c: 79:         if(M2Step < PWM){
  3908     017F  1283               	bcf	3,5	;RP0=0, select bank0
  3909     0180  1303               	bcf	3,6	;RP1=0, select bank0
  3910     0181  0833               	movf	_M2Step+1,w
  3911     0182  3A80               	xorlw	128
  3912     0183  00F2               	movwf	??i1_M2Right
  3913     0184  0871               	movf	i1M2Right@PWM+1,w
  3914     0185  3A80               	xorlw	128
  3915     0186  0272               	subwf	??i1_M2Right,w
  3916     0187  1D03               	skipz
  3917     0188  298B               	goto	u146_25
  3918     0189  0870               	movf	i1M2Right@PWM,w
  3919     018A  0232               	subwf	_M2Step,w
  3920     018B                     u146_25:
  3921     018B  1803               	skipnc
  3922     018C  299B               	goto	i1l1624
  3923                           
  3924                           ;PWM.c: 80:             PORTAbits.RA2 = 0;
  3925     018D  1283               	bcf	3,5	;RP0=0, select bank0
  3926     018E  1303               	bcf	3,6	;RP1=0, select bank0
  3927     018F  1105               	bcf	5,2	;volatile
  3928     0190  2994               	goto	i1l1622
  3929     0191                     i1l1626:
  3930                           
  3931                           ;PWM.c: 84:             PORTAbits.RA2 = 1;
  3932     0191  1283               	bcf	3,5	;RP0=0, select bank0
  3933     0192  1303               	bcf	3,6	;RP1=0, select bank0
  3934     0193  1505               	bsf	5,2	;volatile
  3935     0194                     i1l1622:
  3936                           
  3937                           ;PWM.c: 81:             M2Step++;
  3938     0194  3001               	movlw	1
  3939     0195  07B2               	addwf	_M2Step,f
  3940     0196  1803               	skipnc
  3941     0197  0AB3               	incf	_M2Step+1,f
  3942     0198  3000               	movlw	0
  3943     0199  07B3               	addwf	_M2Step+1,f
  3944                           
  3945                           ;PWM.c: 82:         }
  3946     019A  0008               	return
  3947     019B                     i1l1624:
  3948     019B  1283               	bcf	3,5	;RP0=0, select bank0
  3949     019C  1303               	bcf	3,6	;RP1=0, select bank0
  3950     019D  0833               	movf	_M2Step+1,w
  3951     019E  3A80               	xorlw	128
  3952     019F  00F2               	movwf	??i1_M2Right
  3953     01A0  083E               	movf	_PWM_Limit+1,w
  3954     01A1  3A80               	xorlw	128
  3955     01A2  0272               	subwf	??i1_M2Right,w
  3956     01A3  1D03               	skipz
  3957     01A4  29A7               	goto	u147_25
  3958     01A5  083D               	movf	_PWM_Limit,w
  3959     01A6  0232               	subwf	_M2Step,w
  3960     01A7                     u147_25:
  3961     01A7  1C03               	btfss	3,0
  3962     01A8  2991               	goto	i1l1626
  3963     01A9  1283               	bcf	3,5	;RP0=0, select bank0
  3964     01AA  1303               	bcf	3,6	;RP1=0, select bank0
  3965     01AB  0833               	movf	_M2Step+1,w
  3966     01AC  3A80               	xorlw	128
  3967     01AD  00F2               	movwf	??i1_M2Right
  3968     01AE  083E               	movf	_PWM_Limit+1,w
  3969     01AF  3A80               	xorlw	128
  3970     01B0  0272               	subwf	??i1_M2Right,w
  3971     01B1  1D03               	skipz
  3972     01B2  29B5               	goto	u148_25
  3973     01B3  083D               	movf	_PWM_Limit,w
  3974     01B4  0232               	subwf	_M2Step,w
  3975     01B5                     u148_25:
  3976     01B5  1C03               	skipc
  3977     01B6  0008               	return
  3978                           
  3979                           ;PWM.c: 88:             M2Step=0;
  3980     01B7  1283               	bcf	3,5	;RP0=0, select bank0
  3981     01B8  1303               	bcf	3,6	;RP1=0, select bank0
  3982     01B9  01B2               	clrf	_M2Step
  3983     01BA  01B3               	clrf	_M2Step+1
  3984     01BB  0008               	return
  3985     01BC                     i1l221:	
  3986                           ;PWM.c: 92:     else {PORTAbits.RA2=0;}
  3987                           
  3988     01BC  1283               	bcf	3,5	;RP0=0, select bank0
  3989     01BD  1303               	bcf	3,6	;RP1=0, select bank0
  3990     01BE  1105               	bcf	5,2	;volatile
  3991     01BF  0008               	return
  3992     01C0                     __end_ofi1_M2Right:
  3993                           
  3994                           	psect	text30
  3995     01C0                     __ptext30:	
  3996 ;; *************** function i1_M2Left *****************
  3997 ;; Defined at:
  3998 ;;		line 50 in file "PWM.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  PWM             2    0[COMMON] int 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      void 
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4012 ;;      Params:         2       0       0       0
  4013 ;;      Locals:         0       0       0       0
  4014 ;;      Temps:          1       0       0       0
  4015 ;;      Totals:         3       0       0       0
  4016 ;;Total ram usage:        3 bytes
  4017 ;; Hardware stack levels used: 1
  4018 ;; This function calls:
  4019 ;;		Nothing
  4020 ;; This function is called by:
  4021 ;;		i1_MoveForward
  4022 ;;		i1_MoveBackward
  4023 ;;		i1_MoveLeft
  4024 ;;		i1_MoveRight
  4025 ;;		i1_Stop
  4026 ;; This function uses a non-reentrant model
  4027 ;;
  4028                           
  4029     01C0                     i1_M2Left:	
  4030                           ;psect for function i1_M2Left
  4031                           
  4032                           
  4033                           ;PWM.c: 52:     if(PWM == 0){PORTAbits.RA3 = 1;}
  4034                           
  4035                           ;incstack = 0
  4036                           ; Regs used in i1_M2Left: [wreg+status,2+status,0]
  4037     01C0  0870               	movf	i1M2Left@PWM,w
  4038     01C1  0471               	iorwf	i1M2Left@PWM+1,w
  4039     01C2  1D03               	btfss	3,2
  4040     01C3  29C8               	goto	i1l1594
  4041     01C4  1283               	bcf	3,5	;RP0=0, select bank0
  4042     01C5  1303               	bcf	3,6	;RP1=0, select bank0
  4043     01C6  1585               	bsf	5,3	;volatile
  4044     01C7  0008               	return
  4045     01C8                     i1l1594:
  4046     01C8  0871               	movf	i1M2Left@PWM+1,w
  4047     01C9  3A80               	xorlw	128
  4048     01CA  00F2               	movwf	??i1_M2Left
  4049     01CB  1283               	bcf	3,5	;RP0=0, select bank0
  4050     01CC  1303               	bcf	3,6	;RP1=0, select bank0
  4051     01CD  083E               	movf	_PWM_Limit+1,w
  4052     01CE  3A80               	xorlw	128
  4053     01CF  0272               	subwf	??i1_M2Left,w
  4054     01D0  1D03               	skipz
  4055     01D1  29D4               	goto	u140_25
  4056     01D2  083D               	movf	_PWM_Limit,w
  4057     01D3  0270               	subwf	i1M2Left@PWM,w
  4058     01D4                     u140_25:
  4059     01D4  1803               	skipnc
  4060     01D5  2A13               	goto	i1l209
  4061                           
  4062                           ;PWM.c: 56:         if(M2Step < PWM){
  4063     01D6  1283               	bcf	3,5	;RP0=0, select bank0
  4064     01D7  1303               	bcf	3,6	;RP1=0, select bank0
  4065     01D8  0833               	movf	_M2Step+1,w
  4066     01D9  3A80               	xorlw	128
  4067     01DA  00F2               	movwf	??i1_M2Left
  4068     01DB  0871               	movf	i1M2Left@PWM+1,w
  4069     01DC  3A80               	xorlw	128
  4070     01DD  0272               	subwf	??i1_M2Left,w
  4071     01DE  1D03               	skipz
  4072     01DF  29E2               	goto	u141_25
  4073     01E0  0870               	movf	i1M2Left@PWM,w
  4074     01E1  0232               	subwf	_M2Step,w
  4075     01E2                     u141_25:
  4076     01E2  1803               	skipnc
  4077     01E3  29F2               	goto	i1l1602
  4078                           
  4079                           ;PWM.c: 57:             PORTAbits.RA3 = 0;
  4080     01E4  1283               	bcf	3,5	;RP0=0, select bank0
  4081     01E5  1303               	bcf	3,6	;RP1=0, select bank0
  4082     01E6  1185               	bcf	5,3	;volatile
  4083     01E7  29EB               	goto	i1l1600
  4084     01E8                     i1l1604:
  4085                           
  4086                           ;PWM.c: 61:             PORTAbits.RA3 = 1;
  4087     01E8  1283               	bcf	3,5	;RP0=0, select bank0
  4088     01E9  1303               	bcf	3,6	;RP1=0, select bank0
  4089     01EA  1585               	bsf	5,3	;volatile
  4090     01EB                     i1l1600:
  4091                           
  4092                           ;PWM.c: 58:             M2Step++;
  4093     01EB  3001               	movlw	1
  4094     01EC  07B2               	addwf	_M2Step,f
  4095     01ED  1803               	skipnc
  4096     01EE  0AB3               	incf	_M2Step+1,f
  4097     01EF  3000               	movlw	0
  4098     01F0  07B3               	addwf	_M2Step+1,f
  4099                           
  4100                           ;PWM.c: 59:         }
  4101     01F1  0008               	return
  4102     01F2                     i1l1602:
  4103     01F2  1283               	bcf	3,5	;RP0=0, select bank0
  4104     01F3  1303               	bcf	3,6	;RP1=0, select bank0
  4105     01F4  0833               	movf	_M2Step+1,w
  4106     01F5  3A80               	xorlw	128
  4107     01F6  00F2               	movwf	??i1_M2Left
  4108     01F7  083E               	movf	_PWM_Limit+1,w
  4109     01F8  3A80               	xorlw	128
  4110     01F9  0272               	subwf	??i1_M2Left,w
  4111     01FA  1D03               	skipz
  4112     01FB  29FE               	goto	u142_25
  4113     01FC  083D               	movf	_PWM_Limit,w
  4114     01FD  0232               	subwf	_M2Step,w
  4115     01FE                     u142_25:
  4116     01FE  1C03               	btfss	3,0
  4117     01FF  29E8               	goto	i1l1604
  4118     0200  1283               	bcf	3,5	;RP0=0, select bank0
  4119     0201  1303               	bcf	3,6	;RP1=0, select bank0
  4120     0202  0833               	movf	_M2Step+1,w
  4121     0203  3A80               	xorlw	128
  4122     0204  00F2               	movwf	??i1_M2Left
  4123     0205  083E               	movf	_PWM_Limit+1,w
  4124     0206  3A80               	xorlw	128
  4125     0207  0272               	subwf	??i1_M2Left,w
  4126     0208  1D03               	skipz
  4127     0209  2A0C               	goto	u143_25
  4128     020A  083D               	movf	_PWM_Limit,w
  4129     020B  0232               	subwf	_M2Step,w
  4130     020C                     u143_25:
  4131     020C  1C03               	skipc
  4132     020D  0008               	return
  4133                           
  4134                           ;PWM.c: 65:             M2Step=0;
  4135     020E  1283               	bcf	3,5	;RP0=0, select bank0
  4136     020F  1303               	bcf	3,6	;RP1=0, select bank0
  4137     0210  01B2               	clrf	_M2Step
  4138     0211  01B3               	clrf	_M2Step+1
  4139     0212  0008               	return
  4140     0213                     i1l209:	
  4141                           ;PWM.c: 69:     else {PORTAbits.RA3=0;}
  4142                           
  4143     0213  1283               	bcf	3,5	;RP0=0, select bank0
  4144     0214  1303               	bcf	3,6	;RP1=0, select bank0
  4145     0215  1185               	bcf	5,3	;volatile
  4146     0216  0008               	return
  4147     0217                     __end_ofi1_M2Left:
  4148                           
  4149                           	psect	text31
  4150     0217                     __ptext31:	
  4151 ;; *************** function i1_M1Right *****************
  4152 ;; Defined at:
  4153 ;;		line 27 in file "PWM.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;  PWM             2    0[COMMON] int 
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;		None
  4158 ;; Return value:  Size  Location     Type
  4159 ;;                  1    wreg      void 
  4160 ;; Registers used:
  4161 ;;		wreg, status,2, status,0
  4162 ;; Tracked objects:
  4163 ;;		On entry : 0/0
  4164 ;;		On exit  : 0/0
  4165 ;;		Unchanged: 0/0
  4166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4167 ;;      Params:         2       0       0       0
  4168 ;;      Locals:         0       0       0       0
  4169 ;;      Temps:          1       0       0       0
  4170 ;;      Totals:         3       0       0       0
  4171 ;;Total ram usage:        3 bytes
  4172 ;; Hardware stack levels used: 1
  4173 ;; This function calls:
  4174 ;;		Nothing
  4175 ;; This function is called by:
  4176 ;;		i1_MoveForward
  4177 ;;		i1_MoveBackward
  4178 ;;		i1_MoveLeft
  4179 ;;		i1_MoveRight
  4180 ;;		i1_Stop
  4181 ;; This function uses a non-reentrant model
  4182 ;;
  4183                           
  4184     0217                     i1_M1Right:	
  4185                           ;psect for function i1_M1Right
  4186                           
  4187                           
  4188                           ;PWM.c: 29:     if(PWM == 0){PORTBbits.RB0 = 1;}
  4189                           
  4190                           ;incstack = 0
  4191                           ; Regs used in i1_M1Right: [wreg+status,2+status,0]
  4192     0217  0870               	movf	i1M1Right@PWM,w
  4193     0218  0471               	iorwf	i1M1Right@PWM+1,w
  4194     0219  1D03               	btfss	3,2
  4195     021A  2A1F               	goto	i1l1572
  4196     021B  1283               	bcf	3,5	;RP0=0, select bank0
  4197     021C  1303               	bcf	3,6	;RP1=0, select bank0
  4198     021D  1406               	bsf	6,0	;volatile
  4199     021E  0008               	return
  4200     021F                     i1l1572:
  4201     021F  0871               	movf	i1M1Right@PWM+1,w
  4202     0220  3A80               	xorlw	128
  4203     0221  00F2               	movwf	??i1_M1Right
  4204     0222  1283               	bcf	3,5	;RP0=0, select bank0
  4205     0223  1303               	bcf	3,6	;RP1=0, select bank0
  4206     0224  083E               	movf	_PWM_Limit+1,w
  4207     0225  3A80               	xorlw	128
  4208     0226  0272               	subwf	??i1_M1Right,w
  4209     0227  1D03               	skipz
  4210     0228  2A2B               	goto	u135_25
  4211     0229  083D               	movf	_PWM_Limit,w
  4212     022A  0270               	subwf	i1M1Right@PWM,w
  4213     022B                     u135_25:
  4214     022B  1803               	skipnc
  4215     022C  2A6A               	goto	i1l197
  4216                           
  4217                           ;PWM.c: 33:         if(M1Step < PWM){
  4218     022D  1283               	bcf	3,5	;RP0=0, select bank0
  4219     022E  1303               	bcf	3,6	;RP1=0, select bank0
  4220     022F  0835               	movf	_M1Step+1,w
  4221     0230  3A80               	xorlw	128
  4222     0231  00F2               	movwf	??i1_M1Right
  4223     0232  0871               	movf	i1M1Right@PWM+1,w
  4224     0233  3A80               	xorlw	128
  4225     0234  0272               	subwf	??i1_M1Right,w
  4226     0235  1D03               	skipz
  4227     0236  2A39               	goto	u136_25
  4228     0237  0870               	movf	i1M1Right@PWM,w
  4229     0238  0234               	subwf	_M1Step,w
  4230     0239                     u136_25:
  4231     0239  1803               	skipnc
  4232     023A  2A49               	goto	i1l1580
  4233                           
  4234                           ;PWM.c: 34:             PORTBbits.RB0 = 0;
  4235     023B  1283               	bcf	3,5	;RP0=0, select bank0
  4236     023C  1303               	bcf	3,6	;RP1=0, select bank0
  4237     023D  1006               	bcf	6,0	;volatile
  4238     023E  2A42               	goto	i1l1578
  4239     023F                     i1l1582:
  4240                           
  4241                           ;PWM.c: 38:             PORTBbits.RB0 = 1;
  4242     023F  1283               	bcf	3,5	;RP0=0, select bank0
  4243     0240  1303               	bcf	3,6	;RP1=0, select bank0
  4244     0241  1406               	bsf	6,0	;volatile
  4245     0242                     i1l1578:
  4246                           
  4247                           ;PWM.c: 35:             M1Step++;
  4248     0242  3001               	movlw	1
  4249     0243  07B4               	addwf	_M1Step,f
  4250     0244  1803               	skipnc
  4251     0245  0AB5               	incf	_M1Step+1,f
  4252     0246  3000               	movlw	0
  4253     0247  07B5               	addwf	_M1Step+1,f
  4254                           
  4255                           ;PWM.c: 36:         }
  4256     0248  0008               	return
  4257     0249                     i1l1580:
  4258     0249  1283               	bcf	3,5	;RP0=0, select bank0
  4259     024A  1303               	bcf	3,6	;RP1=0, select bank0
  4260     024B  0835               	movf	_M1Step+1,w
  4261     024C  3A80               	xorlw	128
  4262     024D  00F2               	movwf	??i1_M1Right
  4263     024E  083E               	movf	_PWM_Limit+1,w
  4264     024F  3A80               	xorlw	128
  4265     0250  0272               	subwf	??i1_M1Right,w
  4266     0251  1D03               	skipz
  4267     0252  2A55               	goto	u137_25
  4268     0253  083D               	movf	_PWM_Limit,w
  4269     0254  0234               	subwf	_M1Step,w
  4270     0255                     u137_25:
  4271     0255  1C03               	btfss	3,0
  4272     0256  2A3F               	goto	i1l1582
  4273     0257  1283               	bcf	3,5	;RP0=0, select bank0
  4274     0258  1303               	bcf	3,6	;RP1=0, select bank0
  4275     0259  0835               	movf	_M1Step+1,w
  4276     025A  3A80               	xorlw	128
  4277     025B  00F2               	movwf	??i1_M1Right
  4278     025C  083E               	movf	_PWM_Limit+1,w
  4279     025D  3A80               	xorlw	128
  4280     025E  0272               	subwf	??i1_M1Right,w
  4281     025F  1D03               	skipz
  4282     0260  2A63               	goto	u138_25
  4283     0261  083D               	movf	_PWM_Limit,w
  4284     0262  0234               	subwf	_M1Step,w
  4285     0263                     u138_25:
  4286     0263  1C03               	skipc
  4287     0264  0008               	return
  4288                           
  4289                           ;PWM.c: 42:             M1Step=0;
  4290     0265  1283               	bcf	3,5	;RP0=0, select bank0
  4291     0266  1303               	bcf	3,6	;RP1=0, select bank0
  4292     0267  01B4               	clrf	_M1Step
  4293     0268  01B5               	clrf	_M1Step+1
  4294     0269  0008               	return
  4295     026A                     i1l197:	
  4296                           ;PWM.c: 46:     else {PORTBbits.RB0=0;}
  4297                           
  4298     026A  1283               	bcf	3,5	;RP0=0, select bank0
  4299     026B  1303               	bcf	3,6	;RP1=0, select bank0
  4300     026C  1006               	bcf	6,0	;volatile
  4301     026D  0008               	return
  4302     026E                     __end_ofi1_M1Right:
  4303                           
  4304                           	psect	text32
  4305     026E                     __ptext32:	
  4306 ;; *************** function i1_M1Left *****************
  4307 ;; Defined at:
  4308 ;;		line 4 in file "PWM.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  PWM             2    0[COMMON] int 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;		None
  4313 ;; Return value:  Size  Location     Type
  4314 ;;                  1    wreg      void 
  4315 ;; Registers used:
  4316 ;;		wreg, status,2, status,0
  4317 ;; Tracked objects:
  4318 ;;		On entry : 0/0
  4319 ;;		On exit  : 0/0
  4320 ;;		Unchanged: 0/0
  4321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4322 ;;      Params:         2       0       0       0
  4323 ;;      Locals:         0       0       0       0
  4324 ;;      Temps:          1       0       0       0
  4325 ;;      Totals:         3       0       0       0
  4326 ;;Total ram usage:        3 bytes
  4327 ;; Hardware stack levels used: 1
  4328 ;; This function calls:
  4329 ;;		Nothing
  4330 ;; This function is called by:
  4331 ;;		i1_MoveForward
  4332 ;;		i1_MoveBackward
  4333 ;;		i1_MoveLeft
  4334 ;;		i1_MoveRight
  4335 ;;		i1_Stop
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339     026E                     i1_M1Left:	
  4340                           ;psect for function i1_M1Left
  4341                           
  4342                           
  4343                           ;PWM.c: 6:     if(PWM == 0){PORTBbits.RB3 = 1;}
  4344                           
  4345                           ;incstack = 0
  4346                           ; Regs used in i1_M1Left: [wreg+status,2+status,0]
  4347     026E  0870               	movf	i1M1Left@PWM,w
  4348     026F  0471               	iorwf	i1M1Left@PWM+1,w
  4349     0270  1D03               	btfss	3,2
  4350     0271  2A76               	goto	i1l1550
  4351     0272  1283               	bcf	3,5	;RP0=0, select bank0
  4352     0273  1303               	bcf	3,6	;RP1=0, select bank0
  4353     0274  1586               	bsf	6,3	;volatile
  4354     0275  0008               	return
  4355     0276                     i1l1550:
  4356     0276  0871               	movf	i1M1Left@PWM+1,w
  4357     0277  3A80               	xorlw	128
  4358     0278  00F2               	movwf	??i1_M1Left
  4359     0279  1283               	bcf	3,5	;RP0=0, select bank0
  4360     027A  1303               	bcf	3,6	;RP1=0, select bank0
  4361     027B  083E               	movf	_PWM_Limit+1,w
  4362     027C  3A80               	xorlw	128
  4363     027D  0272               	subwf	??i1_M1Left,w
  4364     027E  1D03               	skipz
  4365     027F  2A82               	goto	u130_25
  4366     0280  083D               	movf	_PWM_Limit,w
  4367     0281  0270               	subwf	i1M1Left@PWM,w
  4368     0282                     u130_25:
  4369     0282  1803               	skipnc
  4370     0283  2AC1               	goto	i1l185
  4371                           
  4372                           ;PWM.c: 10:         if(M1Step < PWM){
  4373     0284  1283               	bcf	3,5	;RP0=0, select bank0
  4374     0285  1303               	bcf	3,6	;RP1=0, select bank0
  4375     0286  0835               	movf	_M1Step+1,w
  4376     0287  3A80               	xorlw	128
  4377     0288  00F2               	movwf	??i1_M1Left
  4378     0289  0871               	movf	i1M1Left@PWM+1,w
  4379     028A  3A80               	xorlw	128
  4380     028B  0272               	subwf	??i1_M1Left,w
  4381     028C  1D03               	skipz
  4382     028D  2A90               	goto	u131_25
  4383     028E  0870               	movf	i1M1Left@PWM,w
  4384     028F  0234               	subwf	_M1Step,w
  4385     0290                     u131_25:
  4386     0290  1803               	skipnc
  4387     0291  2AA0               	goto	i1l1558
  4388                           
  4389                           ;PWM.c: 11:             PORTBbits.RB3 = 0;
  4390     0292  1283               	bcf	3,5	;RP0=0, select bank0
  4391     0293  1303               	bcf	3,6	;RP1=0, select bank0
  4392     0294  1186               	bcf	6,3	;volatile
  4393     0295  2A99               	goto	i1l1556
  4394     0296                     i1l1560:
  4395                           
  4396                           ;PWM.c: 15:             PORTBbits.RB3 = 1;
  4397     0296  1283               	bcf	3,5	;RP0=0, select bank0
  4398     0297  1303               	bcf	3,6	;RP1=0, select bank0
  4399     0298  1586               	bsf	6,3	;volatile
  4400     0299                     i1l1556:
  4401                           
  4402                           ;PWM.c: 12:             M1Step++;
  4403     0299  3001               	movlw	1
  4404     029A  07B4               	addwf	_M1Step,f
  4405     029B  1803               	skipnc
  4406     029C  0AB5               	incf	_M1Step+1,f
  4407     029D  3000               	movlw	0
  4408     029E  07B5               	addwf	_M1Step+1,f
  4409                           
  4410                           ;PWM.c: 13:         }
  4411     029F  0008               	return
  4412     02A0                     i1l1558:
  4413     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  4414     02A1  1303               	bcf	3,6	;RP1=0, select bank0
  4415     02A2  0835               	movf	_M1Step+1,w
  4416     02A3  3A80               	xorlw	128
  4417     02A4  00F2               	movwf	??i1_M1Left
  4418     02A5  083E               	movf	_PWM_Limit+1,w
  4419     02A6  3A80               	xorlw	128
  4420     02A7  0272               	subwf	??i1_M1Left,w
  4421     02A8  1D03               	skipz
  4422     02A9  2AAC               	goto	u132_25
  4423     02AA  083D               	movf	_PWM_Limit,w
  4424     02AB  0234               	subwf	_M1Step,w
  4425     02AC                     u132_25:
  4426     02AC  1C03               	btfss	3,0
  4427     02AD  2A96               	goto	i1l1560
  4428     02AE  1283               	bcf	3,5	;RP0=0, select bank0
  4429     02AF  1303               	bcf	3,6	;RP1=0, select bank0
  4430     02B0  0835               	movf	_M1Step+1,w
  4431     02B1  3A80               	xorlw	128
  4432     02B2  00F2               	movwf	??i1_M1Left
  4433     02B3  083E               	movf	_PWM_Limit+1,w
  4434     02B4  3A80               	xorlw	128
  4435     02B5  0272               	subwf	??i1_M1Left,w
  4436     02B6  1D03               	skipz
  4437     02B7  2ABA               	goto	u133_25
  4438     02B8  083D               	movf	_PWM_Limit,w
  4439     02B9  0234               	subwf	_M1Step,w
  4440     02BA                     u133_25:
  4441     02BA  1C03               	skipc
  4442     02BB  0008               	return
  4443                           
  4444                           ;PWM.c: 19:             M1Step=0;
  4445     02BC  1283               	bcf	3,5	;RP0=0, select bank0
  4446     02BD  1303               	bcf	3,6	;RP1=0, select bank0
  4447     02BE  01B4               	clrf	_M1Step
  4448     02BF  01B5               	clrf	_M1Step+1
  4449     02C0  0008               	return
  4450     02C1                     i1l185:	
  4451                           ;PWM.c: 23:     else {PORTBbits.RB3=0;}
  4452                           
  4453     02C1  1283               	bcf	3,5	;RP0=0, select bank0
  4454     02C2  1303               	bcf	3,6	;RP1=0, select bank0
  4455     02C3  1186               	bcf	6,3	;volatile
  4456     02C4  0008               	return
  4457     02C5                     __end_ofi1_M1Left:
  4458                           
  4459                           	psect	text33
  4460     0451                     __ptext33:	
  4461 ;; *************** function _DataCompare *****************
  4462 ;; Defined at:
  4463 ;;		line 68 in file "USART.c"
  4464 ;; Parameters:    Size  Location     Type
  4465 ;;  Buffer          1    wreg     PTR unsigned char 
  4466 ;;		 -> HC06_Data(3), 
  4467 ;;  Data            1    0[COMMON] PTR unsigned char 
  4468 ;;		 -> STR_18(2), STR_16(2), STR_14(2), STR_12(2), 
  4469 ;;		 -> STR_10(2), STR_8(2), STR_6(2), 
  4470 ;;  length          2    1[COMMON] unsigned int 
  4471 ;; Auto vars:     Size  Location     Type
  4472 ;;  Buffer          1    5[COMMON] PTR unsigned char 
  4473 ;;		 -> HC06_Data(3), 
  4474 ;;  i               2    6[COMMON] int 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  2    0[COMMON] int 
  4477 ;; Registers used:
  4478 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  4479 ;; Tracked objects:
  4480 ;;		On entry : 0/0
  4481 ;;		On exit  : 0/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4484 ;;      Params:         3       0       0       0
  4485 ;;      Locals:         3       0       0       0
  4486 ;;      Temps:          2       0       0       0
  4487 ;;      Totals:         8       0       0       0
  4488 ;;Total ram usage:        8 bytes
  4489 ;; Hardware stack levels used: 2
  4490 ;; This function calls:
  4491 ;;		Nothing
  4492 ;; This function is called by:
  4493 ;;		_ReceiveControl
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497     0451                     _DataCompare:	
  4498                           ;psect for function _DataCompare
  4499                           
  4500                           
  4501                           ;incstack = 0
  4502 ;; using string table level
  4503                           ; Regs used in _DataCompare: [wreg-fsr0h+status,2+status,0+pclath]
  4504                           ;DataCompare@Buffer stored from wreg
  4505     0451  00F5               	movwf	DataCompare@Buffer
  4506                           
  4507                           ;USART.c: 70:     int i = 0;
  4508     0452  01F6               	clrf	DataCompare@i
  4509     0453  01F7               	clrf	DataCompare@i+1
  4510     0454                     i1l1698:	
  4511                           ;USART.c: 72:     while(i<length){
  4512                           
  4513                           
  4514                           ;USART.c: 72:     while(i<length){
  4515     0454  0872               	movf	DataCompare@length+1,w
  4516     0455  0277               	subwf	DataCompare@i+1,w
  4517     0456  1D03               	skipz
  4518     0457  2C5A               	goto	u161_25
  4519     0458  0871               	movf	DataCompare@length,w
  4520     0459  0276               	subwf	DataCompare@i,w
  4521     045A                     u161_25:
  4522     045A  1803               	btfsc	3,0
  4523     045B  0008               	return
  4524                           
  4525                           ;USART.c: 74:         if(Buffer[i] == Data[i]){
  4526     045C  0876               	movf	DataCompare@i,w
  4527     045D  0770               	addwf	DataCompare@Data,w
  4528     045E  0084               	movwf	4
  4529     045F  2411               	fcall	stringdir
  4530     0460  00F3               	movwf	??_DataCompare
  4531     0461  0876               	movf	DataCompare@i,w
  4532     0462  0775               	addwf	DataCompare@Buffer,w
  4533     0463  00F4               	movwf	??_DataCompare+1
  4534     0464  0874               	movf	??_DataCompare+1,w
  4535     0465  0084               	movwf	4
  4536     0466  1383               	bcf	3,7	;select IRP bank0
  4537     0467  0800               	movf	0,w
  4538     0468  0673               	xorwf	??_DataCompare,w
  4539     0469  1D03               	skipz
  4540     046A  2C7E               	goto	i1l1690
  4541                           
  4542                           ;USART.c: 76:             i++;
  4543     046B  3001               	movlw	1
  4544     046C  07F6               	addwf	DataCompare@i,f
  4545     046D  1803               	skipnc
  4546     046E  0AF7               	incf	DataCompare@i+1,f
  4547     046F  3000               	movlw	0
  4548     0470  07F7               	addwf	DataCompare@i+1,f
  4549                           
  4550                           ;USART.c: 77:             if(i==length){
  4551     0471  0872               	movf	DataCompare@length+1,w
  4552     0472  0677               	xorwf	DataCompare@i+1,w
  4553     0473  1D03               	skipz
  4554     0474  2C77               	goto	u159_25
  4555     0475  0871               	movf	DataCompare@length,w
  4556     0476  0676               	xorwf	DataCompare@i,w
  4557     0477                     u159_25:
  4558     0477  1D03               	skipz
  4559     0478  2C7E               	goto	i1l1690
  4560                           
  4561                           ;USART.c: 79:                 return 1;
  4562     0479  3001               	movlw	1
  4563     047A  00F0               	movwf	?_DataCompare
  4564     047B  3000               	movlw	0
  4565     047C  00F1               	movwf	?_DataCompare+1
  4566     047D  0008               	return
  4567     047E                     i1l1690:
  4568                           
  4569                           ;USART.c: 85:         if(Buffer[i] != Data[i]){
  4570     047E  0876               	movf	DataCompare@i,w
  4571     047F  0770               	addwf	DataCompare@Data,w
  4572     0480  0084               	movwf	4
  4573     0481  2411               	fcall	stringdir
  4574     0482  00F3               	movwf	??_DataCompare
  4575     0483  0876               	movf	DataCompare@i,w
  4576     0484  0775               	addwf	DataCompare@Buffer,w
  4577     0485  00F4               	movwf	??_DataCompare+1
  4578     0486  0874               	movf	??_DataCompare+1,w
  4579     0487  0084               	movwf	4
  4580     0488  0800               	movf	0,w
  4581     0489  0673               	xorwf	??_DataCompare,w
  4582     048A  1903               	skipnz
  4583     048B  2C54               	goto	i1l1698
  4584                           
  4585                           ;USART.c: 88:             return 0;
  4586     048C  01F0               	clrf	?_DataCompare
  4587     048D  01F1               	clrf	?_DataCompare+1
  4588     048E  0008               	return
  4589     048F                     __end_of_DataCompare:
  4590     007E                     btemp	set	126	;btemp
  4591     007E                     wtemp0	set	126
  4592                           
  4593                           	psect	idloc
  4594                           
  4595                           ;Config register IDLOC0 @ 0x2000
  4596                           ;	unspecified, using default values
  4597     2000                     	org	8192
  4598     2000  3FFF               	dw	16383
  4599                           
  4600                           ;Config register IDLOC1 @ 0x2001
  4601                           ;	unspecified, using default values
  4602     2001                     	org	8193
  4603     2001  3FFF               	dw	16383
  4604                           
  4605                           ;Config register IDLOC2 @ 0x2002
  4606                           ;	unspecified, using default values
  4607     2002                     	org	8194
  4608     2002  3FFF               	dw	16383
  4609                           
  4610                           ;Config register IDLOC3 @ 0x2003
  4611                           ;	unspecified, using default values
  4612     2003                     	org	8195
  4613     2003  3FFF               	dw	16383
  4614                           
  4615                           	psect	config
  4616                           
  4617                           ;Config register CONFIG @ 0x2007
  4618                           ;	Oscillator Selection bits
  4619                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  4620                           ;	Watchdog Timer Enable bit
  4621                           ;	WDTE = OFF, WDT disabled
  4622                           ;	Power-up Timer Enable bit
  4623                           ;	PWRTE = OFF, PWRT disabled
  4624                           ;	RA5/MCLR/VPP Pin Function Select bit
  4625                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  4626                           ;	Brown-out Detect Enable bit
  4627                           ;	BOREN = OFF, BOD disabled
  4628                           ;	Low-Voltage Programming Enable bit
  4629                           ;	LVP = ON, RB4/PGM pin has PGM function, low-voltage programming enabled
  4630                           ;	Data EE Memory Code Protection bit
  4631                           ;	CPD = OFF, Data memory code protection off
  4632                           ;	Flash Program Memory Code Protection bit
  4633                           ;	CP = OFF, Code protection off
  4634     2007                     	org	8199
  4635     2007  3F98               	dw	16280

Data Sizes:
    Strings     58
    Constant    0
    Data        4
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     16      33
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    ReceiveControl@Rxdata	PTR unsigned char  size(1) Largest target is 3
		 -> HC06_Data(BANK0[3]), 

    DataCompare@Data	PTR unsigned char  size(1) Largest target is 2
		 -> STR_18(CODE[2]), STR_16(CODE[2]), STR_14(CODE[2]), STR_12(CODE[2]), 
		 -> STR_10(CODE[2]), STR_8(CODE[2]), STR_6(CODE[2]), 

    DataCompare@Buffer	PTR unsigned char  size(1) Largest target is 3
		 -> HC06_Data(BANK0[3]), 

    USARTRead@Rxdata	PTR unsigned char  size(1) Largest target is 3
		 -> HC06_Data(BANK0[3]), 

    USARTWrite@text	PTR unsigned char  size(1) Largest target is 15
		 -> STR_4(CODE[11]), STR_3(CODE[15]), STR_2(CODE[10]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _GeneralInterrupt in COMMON

    i1_RobotControl->i1_Delay_Seg
    i1_MoveRight->i1_M1Left
    i1_MoveRight->i1_M1Right
    i1_MoveRight->i1_M2Left
    i1_MoveRight->i1_M2Right
    i1_MoveLeft->i1_M1Left
    i1_MoveLeft->i1_M1Right
    i1_MoveLeft->i1_M2Left
    i1_MoveLeft->i1_M2Right
    i1_MoveForward->i1_M1Left
    i1_MoveForward->i1_M1Right
    i1_MoveForward->i1_M2Left
    i1_MoveForward->i1_M2Right
    i1_MoveBackward->i1_M1Left
    i1_MoveBackward->i1_M1Right
    i1_MoveBackward->i1_M2Left
    i1_MoveBackward->i1_M2Right
    i1_Delay_Seg->i1___wmul
    _ReceiveControl->_DataCompare
    i1_Stop->i1_M1Left
    i1_Stop->i1_M1Right
    i1_Stop->i1_M2Left
    i1_Stop->i1_M2Right

Critical Paths under _main in BANK0

    _RobotControl->_Delay_Seg
    _Stop->_M1Left
    _Stop->_M1Right
    _Stop->_M2Left
    _Stop->_M2Right
    _MoveRight->_M1Left
    _MoveRight->_M1Right
    _MoveRight->_M2Left
    _MoveRight->_M2Right
    _MoveLeft->_M1Left
    _MoveLeft->_M1Right
    _MoveLeft->_M2Left
    _MoveLeft->_M2Right
    _MoveForward->_M1Left
    _MoveForward->_M1Right
    _MoveForward->_M2Left
    _MoveForward->_M2Right
    _MoveBackward->_M1Left
    _MoveBackward->_M1Right
    _MoveBackward->_M2Left
    _MoveBackward->_M2Right
    _Delay_Seg->___wmul
    _GeneralConfig->_Delay_HalfSeg
    _HC06Config->_Delay_HalfSeg
    _Delay_HalfSeg->___wmul

Critical Paths under _GeneralInterrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _GeneralInterrupt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _GeneralInterrupt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   11830
                      _GeneralConfig
                       _RobotControl
 ---------------------------------------------------------------------------------
 (1) _RobotControl                                         0     0      0    9917
                          _Delay_Seg
                       _MoveBackward
                        _MoveForward
                           _MoveLeft
                          _MoveRight
                               _Stop
 ---------------------------------------------------------------------------------
 (2) _Stop                                                 0     0      0    1784
                             _M1Left
                            _M1Right
                             _M2Left
                            _M2Right
 ---------------------------------------------------------------------------------
 (2) _MoveRight                                            0     0      0    1784
                             _M1Left
                            _M1Right
                             _M2Left
                            _M2Right
 ---------------------------------------------------------------------------------
 (2) _MoveLeft                                             0     0      0    1784
                             _M1Left
                            _M1Right
                             _M2Left
                            _M2Right
 ---------------------------------------------------------------------------------
 (2) _MoveForward                                          0     0      0    1784
                             _M1Left
                            _M1Right
                             _M2Left
                            _M2Right
 ---------------------------------------------------------------------------------
 (2) _MoveBackward                                         0     0      0    1784
                             _M1Left
                            _M1Right
                             _M2Left
                            _M2Right
 ---------------------------------------------------------------------------------
 (3) _M2Right                                              3     1      2     446
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _M2Left                                               3     1      2     446
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _M1Right                                              3     1      2     446
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _M1Left                                               3     1      2     446
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _Delay_Seg                                            6     4      2     997
                                             10 BANK0      6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _GeneralConfig                                        0     0      0    1913
                      _Delay_HalfSeg
                         _HC06Config
                        _USARTConfig
 ---------------------------------------------------------------------------------
 (2) _USARTConfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HC06Config                                           0     0      0    1220
                      _Delay_HalfSeg
                         _USARTWrite
 ---------------------------------------------------------------------------------
 (3) _USARTWrite                                           6     4      2     527
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _Delay_HalfSeg                                        6     4      2     693
                                             10 BANK0      6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     396
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _GeneralInterrupt                                     4     4      0    6971
                                              0 BANK0      4     4      0
                     _ReceiveControl
                          _USARTRead
                     i1_RobotControl
 ---------------------------------------------------------------------------------
 (6) i1_RobotControl                                       0     0      0    4315
                        i1_Delay_Seg
                     i1_MoveBackward
                      i1_MoveForward
                         i1_MoveLeft
                        i1_MoveRight
                             i1_Stop
 ---------------------------------------------------------------------------------
 (7) i1_MoveRight                                          0     0      0     784
                           i1_M1Left
                          i1_M1Right
                           i1_M2Left
                          i1_M2Right
 ---------------------------------------------------------------------------------
 (7) i1_MoveLeft                                           0     0      0     784
                           i1_M1Left
                          i1_M1Right
                           i1_M2Left
                          i1_M2Right
 ---------------------------------------------------------------------------------
 (7) i1_MoveForward                                        0     0      0     784
                           i1_M1Left
                          i1_M1Right
                           i1_M2Left
                          i1_M2Right
 ---------------------------------------------------------------------------------
 (7) i1_MoveBackward                                       0     0      0     784
                           i1_M1Left
                          i1_M1Right
                           i1_M2Left
                          i1_M2Right
 ---------------------------------------------------------------------------------
 (7) i1_Delay_Seg                                          6     4      2     395
                                              6 COMMON     6     4      2
                           i1___wmul
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) _USARTRead                                            6     4      2     101
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (6) _ReceiveControl                                       1     1      0    2555
                                              8 COMMON     1     1      0
                        _DataCompare
                             i1_Stop
 ---------------------------------------------------------------------------------
 (7) i1_Stop                                               0     0      0     784
                           i1_M1Left
                          i1_M1Right
                           i1_M2Left
                          i1_M2Right
 ---------------------------------------------------------------------------------
 (8) i1_M2Right                                            3     1      2     196
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (8) i1_M2Left                                             3     1      2     196
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (8) i1_M1Right                                            3     1      2     196
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (8) i1_M1Left                                             3     1      2     196
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (8) _DataCompare                                          8     5      3    1584
                                              0 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GeneralConfig
     _Delay_HalfSeg
       ___wmul
     _HC06Config
       _Delay_HalfSeg
       _USARTWrite
     _USARTConfig
   _RobotControl
     _Delay_Seg
       ___wmul
     _MoveBackward
       _M1Left
       _M1Right
       _M2Left
       _M2Right
     _MoveForward
       _M1Left
       _M1Right
       _M2Left
       _M2Right
     _MoveLeft
       _M1Left
       _M1Right
       _M2Left
       _M2Right
     _MoveRight
       _M1Left
       _M1Right
       _M2Left
       _M2Right
     _Stop
       _M1Left
       _M1Right
       _M2Left
       _M2Right

 _GeneralInterrupt (ROOT)
   _ReceiveControl
     _DataCompare
     i1_Stop
       i1_M1Left
       i1_M1Right
       i1_M2Left
       i1_M2Right
   _USARTRead
   i1_RobotControl
     i1_Delay_Seg
       i1___wmul
     i1_MoveBackward
       i1_M1Left
       i1_M1Right
       i1_M2Left
       i1_M2Right
     i1_MoveForward
       i1_M1Left
       i1_M1Right
       i1_M2Left
       i1_M2Right
     i1_MoveLeft
       i1_M1Left
       i1_M1Right
       i1_M2Left
       i1_M2Right
     i1_MoveRight
       i1_M1Left
       i1_M1Right
       i1_M2Left
       i1_M2Right
     i1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     10      21       3       41.2%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2F      10        0.0%
ABS                  0      0      2F       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Sep 26 20:09:10 2022

                       _i 0030                         pc 0002                        l58 00F1  
                      fsr 0004       ___wmul@multiplicand 0026          i1___wmul@product 0074  
         ?i1_RobotControl 0070                       l221 0314                       l161 0500  
                     l209 0367                       l155 052A                       l406 0598  
                     l185 040D                       l283 048F                       l268 057D  
                     l292 04B4                       l197 03BA                       l286 0499  
                     l289 04A9                       fsr0 0004                       indf 0000  
         __end_of_M1Right 03BE           __end_of_M2Right 0318                      l1500 0346  
                    l1502 033C                      l1432 0590                      l1520 02EC  
                    l1522 02F3                      l1514 02CB                      l1524 02E9  
                    l1470 03C4                      l1454 0392                      l1544 0571  
                    l1480 03E2                      l1456 0399                      l1448 0371  
                    l1458 038F                      l1730 00BE                      l1722 00B1  
                    l1476 03E5                      l1492 031E                      l1478 03EC  
                    l1734 00C5                      l1726 00B7                      l1752 00EF  
                    l1498 033F                      l1746 00D5                      l1738 00CC  
                    l1774 00F6                      l1934 0713                      STR_1 043B  
                    STR_2 0431                      STR_3 0417                      STR_4 0426  
                    STR_5 044B                      STR_6 044B                      STR_7 0445  
                    STR_8 0445                      STR_9 044F                      u1105 03B3  
                    u1035 0599                      u1045 05A0                      u1125 03CE  
                    u1205 0360                      u1135 03DC                      u1145 03F8  
                    u1225 02D5                      u1155 0406                      u1075 037B  
                    u1235 02E3                      u2037 050E                      u1085 0389  
                    u1245 02FF                      u2047 0538                      u1095 03A5  
                    u1175 0328                      u1255 030D                      u1265 0530  
                    u1185 0336                      u1195 0352                      u1285 057B  
                    u1535 0506                      u1735 00DE                      _INTF 0059  
                    i1l58 0154                      _OSCF 0473                      _TMR1 000E  
                    _Stop 067A                      _main 0712                      btemp 007E  
                    start 0010               _DataCompare 0451               _Data_Length 007C  
                   ?_Stop 0070          __end_ofi1_M1Left 02C5                     ?_main 0070  
        __end_ofi1_M2Left 0217                     STR_10 044F                     STR_11 0447  
                   STR_12 0447                     STR_13 0449                     STR_14 0449  
                   STR_15 044D                     STR_16 044D                     STR_18 0443  
                   _CMCON 001F                     _T1CON 0010                     i1l221 01BC  
                   i1l150 0603                     i1l209 0213                     i1l161 0554  
         ??i1_MoveForward 0073                     i1l406 05B9                     i1l185 02C1  
                   i1l197 026A                     i1l277 05D9          USARTWrite@length 0024  
                   _RCREG 001A                     _RCSTA 0018                     _SPBRG 0099  
                   _TXREG 0019                     _TXSTA 0098                     pclath 000A  
        __end_ofi1___wmul 05D0                     status 0003       i1___wmul@multiplier 0070  
             ?i1_MoveLeft 0070                     wtemp0 007E                _ManualMode 0038  
             ?_USARTWrite 0024           __initialization 0011              __end_of_Stop 0691  
            __end_of_main 0715          ??i1_MoveBackward 0073                    ??_Stop 0027  
            ??_HC06Config 0030                    ??_main 0030          __end_of_MoveLeft 0644  
               ??_M1Right 0026                 ??_M2Right 0026             ??_MoveForward 0027  
       ?_GeneralInterrupt 0070         __end_ofi1_M1Right 026E        ??_GeneralInterrupt 0020  
       __end_ofi1_M2Right 01C0              ?i1_Delay_Seg 0076                    _M1Left 03BE  
                  _M2Left 0318                    i1l1600 01EB                    i1l1602 01F2  
                  _M1Step 0034                    i1l1604 01E8                    i1l1550 0276  
                  i1l1622 0194                    i1l1560 0296                    i1l1624 019B  
                  i1l1616 0171                    i1l1626 0191                    i1l1556 0299  
                  i1l1580 0249                    i1l1572 021F                    i1l1636 05B1  
                  i1l1558 02A0                    i1l1582 023F                    i1l1902 0138  
                  i1l1832 05DD                    i1l1690 047E                    i1l1578 0242  
                  i1l1594 01C8                    i1l1930 0159                    _M2Step 0032  
                  i1l1860 006E                    i1l1852 0048                    i1l1836 05D3  
                  i1l1908 0152                    i1l1940 05FB                    u130_25 0282  
                  i1l1838 05EC                    i1l1864 0081                    i1l1856 005B  
                  i1l1848 0037                    i1l1698 0454                    i1l1890 0128  
                  i1l1882 011A                    i1l1868 0094                    u131_25 0290  
                  i1l1886 0121                    i1l1878 0114                    i1l1894 012F  
                  u132_25 02AC                    u140_25 01D4                    u133_25 02BA  
                  u141_25 01E2                    u205_27 0560                    u142_25 01FE  
                  u150_25 05BA                    u135_25 022B                    u143_25 020C  
                  u151_25 05C1                    u136_25 0239                    u161_25 045A  
                  u137_25 0255                    u145_25 017D                    u138_25 0263  
                  u146_25 018B                    u162_25 055A                    u147_25 01A7  
                  u148_25 01B5                    u159_25 0477                    u197_25 0141  
                  i1_Stop 06ED        __end_of_HC06Config 04C5                    ___wmul 058E  
       __end_of_USARTRead 05F1             ?_MoveBackward 0070                    saved_w 007E  
               M1Left@PWM 0024     __end_of_GeneralConfig 04F1                 M2Left@PWM 0024  
            ?i1_MoveRight 0070       __end_of_MoveForward 065F         __end_of_Delay_Seg 051B  
 __end_of__initialization 0020              ?_USARTConfig 0070                 ?i1_M1Left 0070  
               ?i1_M2Left 0070            __pcstackCOMMON 0070            Delay_HalfSeg@i 002E  
          Delay_HalfSeg@j 002A              i1M1Right@PWM 0070              __pidataBANK0 070E  
        ??i1_RobotControl 007C              i1M2Right@PWM 0070                 ?i1___wmul 0070  
          ??_MoveBackward 0027            _OPTION_REGbits 0081                   ?_M1Left 0024  
                 ?_M2Left 0024                __pbssBANK0 0030         __end_of_MoveRight 0629  
                 ?i1_Stop 0070                ??i1_M1Left 0072                ??i1_M2Left 0072  
               ?_MoveLeft 0070                __pmaintext 0712              ?_DataCompare 0070  
                 ?___wmul 0024                __pintentry 0004           DataCompare@Data 0070  
           ?_RobotControl 0070                ??i1___wmul 0074                   _M1Right 036B  
                 _M2Right 02C5               _MoveForward 0644                __stringtab 0411  
               _HC06_Data 003A         DataCompare@Buffer 0075              ??i1_MoveLeft 0073  
              ??_MoveLeft 0027              ??_USARTWrite 0026                   _Pressed 0036  
       DataCompare@length 0071            ??_RobotControl 0030              DataCompare@i 0076  
                 __ptext1 00A5                   __ptext2 067A                   __ptext3 060E  
                 __ptext4 0629                   __ptext5 0644                   __ptext6 065F  
                 __ptext7 02C5                   __ptext8 0318                   __ptext9 036B  
      __end_ofi1_MoveLeft 06BF     __end_ofi1_MoveForward 06D6             _Delay_HalfSeg 051B  
                 clrloop0 06FF        __end_of_USARTWrite 058E      end_of_initialization 0020  
               i1_M1Right 0217                 i1_M2Right 0169      __end_of_MoveBackward 067A  
               _RCSTAbits 0018     i1___wmul@multiplicand 0072                 _PORTAbits 0005  
               _PORTBbits 0006            ?_Delay_HalfSeg 002A                 _USARTRead 05D0  
               _TRISAbits 0085                 _TRISBbits 0086                M1Right@PWM 0024  
               _PWM_Limit 003D                M2Right@PWM 0024            __end_of_M1Left 0411  
          __end_of_M2Left 036B                ?i1_M1Right 0070                ?i1_M2Right 0070  
               _TXSTAbits 0098            USARTWrite@text 0029            _ReceiveControl 0022  
               _Delay_Seg 04F1            __end_ofi1_Stop 06FE            __end_of___wmul 05AF  
     start_initialization 0011                ?_USARTRead 0070               USARTWrite@i 0027  
                ??_M1Left 0026                  ??_M2Left 0026    __end_of_ReceiveControl 00A5  
    __end_of_RobotControl 010A                  ??i1_Stop 0073                 _MoveRight 060E  
              ?_Delay_Seg 002A                  ??___wmul 0028               __pdataBANK0 003D  
             i1M1Left@PWM 0070               i1M2Left@PWM 0070           ??_Delay_HalfSeg 002C  
                ?_M1Right 0024                  ?_M2Right 0024               __pbssCOMMON 007C  
            ?_MoveForward 0070                 ___latbits 0000             __pcstackBANK0 0020  
         ?_ReceiveControl 0070               ??i1_M1Right 0072               ??i1_M2Right 0072  
              ?_MoveRight 0070              i1Delay_Seg@i 007A              i1Delay_Seg@j 0076  
        _GeneralInterrupt 05F1                 __pstrings 0411              _MoveBackward 065F  
             ??_USARTRead 0072             _GeneralConfig 04C5             ??i1_Delay_Seg 0078  
       interrupt_function 0004            ___wmul@product 0028      ReceiveControl@Rxdata 0078  
               clear_ram0 06FE                  _PIE1bits 008C                  i1_M1Left 026E  
                i1_M2Left 01C0               ??_Delay_Seg 002C                  _PIR1bits 000C  
              _HC06Config 048F               __stringbase 0416         ___wmul@multiplier 0024  
                i1___wmul 05AF           USARTRead@Rxdata 0073            ?_GeneralConfig 0070  
          i1_MoveBackward 06D6                USARTRead@j 0074             ??i1_MoveRight 0073  
           ??_USARTConfig 0024               ??_MoveRight 0027       __end_ofi1_Delay_Seg 056C  
                _MoveLeft 0629                  _MotorPWM 003F        __end_of__stringtab 0417  
            _RobotControl 00A5    __end_ofi1_MoveBackward 06ED                  __ptext10 03BE  
                __ptext11 04F1                  __ptext20 0691                  __ptext12 04C5  
                __ptext21 06A8                  __ptext13 0706                  __ptext30 01C0  
                __ptext22 06BF                  __ptext14 048F                  __ptext31 0217  
                __ptext23 06D6                  __ptext15 056C                  __ptext32 026E  
                __ptext24 0545                  __ptext16 051B                  __ptext33 0451  
                __ptext25 05AF                  __ptext17 058E                  __ptext26 05D0  
                __ptext18 05F1                  __ptext27 0022                  __ptext19 010A  
                __ptext28 06ED                  __ptext29 0169       __end_ofi1_MoveRight 06A8  
           ??_DataCompare 0073       __end_of_USARTConfig 070E               ?_HC06Config 0070  
         ??_GeneralConfig 0030                Delay_Seg@i 002E                Delay_Seg@j 002A  
              _INTCONbits 000B            i1_RobotControl 010A           ?i1_MoveBackward 0070  
__end_of_GeneralInterrupt 060E             i1_MoveForward 06BF          ??_ReceiveControl 0078  
                intlevel1 0000               i1_Delay_Seg 0545                 stringcode 0411  
  __end_ofi1_RobotControl 0169       __end_of_DataCompare 048F     __end_of_Delay_HalfSeg 0545  
          ?i1_MoveForward 0070                  stringdir 0411                  stringtab 0411  
             i1_MoveRight 0691                i1_MoveLeft 06A8               _USARTConfig 0706  
              _USARTWrite 056C  
